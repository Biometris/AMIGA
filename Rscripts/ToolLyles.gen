" Completely randomized than one loop is sufficient "

" Simulation settings "
text      file ; 'M:/My Documents/Default-0.csv'
text      file ; 'M:/My Documents/TechDoc-0.csv'
text      file ; 'M:/My Documents/SmallMeans-0.csv'

scalar    ngridLOC ; 3
variate   nBlocks ; !(2,4,6,8,10,12,14,16)
variate   nBlocks ; !(2,4,8,16,32,64)  " For fitting "
scalar    alfa ; 0.05
scalar    minimumSum ; 0.9999          " Minimum sum for probs for each mean "
scalar    seed ; 342894

scalar    powerdist ; 1.5
text      design ; 'splitplot'
text      design ; 'randomized'
text      design ; 'block'

text      models ; !t(LN,NB)
text      models ; !t(LN,SQ,OP)
text      models ; !t(LN,SQ,OP,NB)
text      models ; !t(LN,SQ)
text      models ; !t(LN,SQ,OP)
text      models ; !t(LN,SQ,OP,NB)

" Some extra options "
scalar    mis
calculate init = urand(seed ; 1)
setoption [fit] nomessage ; !t(res,lev,disp)
setoption [add] nomessage ; !t(res,lev,disp)
setoption [r2negbinomial] nomessage ; !t(warnings)
variate   perc ; 100 * (!(0,1) + !(1,-1)*alfa/2)

" Import Data from Simulation tool "
text      [nvalues=1] dummy, distribution
scalar    lowerLOC, upperLOC, cvComparator, cvBlock
open      file ; channel=2 ; filetype=input
for read=lowerLOC, upperLOC, cvComparator, cvBlock, distribution
  read    [print=* ; channel=2 ; end=*] dummy, read
endfor
print     lowerLOC, upperLOC, cvComparator, cvBlock, distribution
close     channel=2 ; filetype=input
fileread  [print=* ; name=file ; skip=5 ; imethod=read ; separator=',' ; \
          maxcat=0 ; isave=isave]
print     Variety, Ranking, Spraying, Comparison, Mean ; deci=4(0),2
sreplace  ['OverdispersedPoisson' ; 'opoisson'] distribution

" Define treatments as factors "
txconstru [tsave] isave
calculate posfactor[1,2] = position('Variety','Mean' ; tsave)  - (0,1)
variate   ifactor ; !(posfactor[1]...posfactor[2]) ; decimals=0
calculate nfactor = nvalues(ifactor)
groups    [redefine=yes] isave[#ifactor]

" Redefine ordering of factor labels of Variety; this ensures that dum[1]
  defines the parameter of interest "
calculate nLevelsVariety = nlevels(Variety)
if nLevelsVariety.gt.2
    getattrib [attribute=labels] Variety ; save=labVariety
    subset    [labVariety[].ni.!t(GMO,Comparator)] labVariety[] ; newlabels
    text      newlabels ; !t(GMO,Comparator,#newlabels)
  else
    text    newlabels ; !t(GMO,Comparator)
endif
facamend  Variety  ; newlabels
tabulate  [class=Variety ; print=count]

" Define blocks as factors "
groups    [redefine=yes] Block, MainPlot, SubPlot
calculate nplots = nvalues(Block)

" Define comparison "
variate   comparison ; (Comparison.in.'IncludeGMO') - \
          (Comparison.in.'IncludeComparator') ; decimals=0
restrict  Mean ; abs(comparison)
calculate meanComparator = mean(Mean)
restrict  Mean
print meanComparator

" Determine interaction factors and create dummies for Interaction*Variety "
calculate nInteractions = mean(NumberOfInteractions)
variate   cond ; !(1...#nfactor)
subset    [((cond-1).le.nInteractions)] ifactor ; intfactor
pointer   [values=isave[#intfactor]] intfactors
facproduc intfactors ; Interactions
calculate dum[1] = comparison.in.1
if sum(comparison.eq.0)
  subset    [comparison.eq.0 ; setlevels=yes] Interactions ; subInteractions
  getattrib [attribute=levels,labels] subInteractions ; save=levels
  scalar    counter ; 1
  for ll=#levels['levels']
    calculate counter = counter + 1
    calculate dum[counter] = Interactions.in.ll
  endfor
endif
calculate ndum,ndum1 = nvalues(dum) - (0,1)
variate   [modify=yes] dum[] ; decimals=0
if 1  " Printing of dummies for interaction "
  calculate nn = nvalues(intfactors)+1
  print     intfactors[], comparison, dum[] ; field=#nn(12), #ndum(7)
endif
calculate nParameters = 1 + nvalues(dum)
print     nParameters

" Determine Modifiers "
calculate nModifiers = mean(NumberOfModifiers)
if nModifiers
  subset    [ifactor.ni.intfactor] ifactor ; modfactor
  pointer   [values=isave[#modfactor]] modfactors
  facproduc modfactors ; Modifiers
  tabulate  [class=Modifiers] Mean ; mean=meanModifier
  if variance(meanModifier).eq.0
      " It is NOT a true modifier "
      calculate nModifiers = 0
    else
      calculate nParameters = nParameters + nlevels(Modifiers) - 1
  endif
endif
if 1*nModifiers  " Printing of dummies for modifiers "
  print     modfactors[], Modifiers ; field=12
endif

" Deal with distribution and Calculate overdispersion factor "
calculate cvPO = sqrt(Mean)/Mean
calculate sig2OP = (cvComparator/100)**2 * meanComparator
calculate cvOP = 100*sqrt(sig2OP*Mean)/Mean
calculate sig2NB = (cvComparator/100)**2 - 1/meanComparator
calculate cvNB = 100*sqrt(Mean + sig2NB*Mean*Mean)/Mean
calculate sig2PW = (cvComparator/100)**2 * meanComparator**(2-powerdist)
calculate cvPW = 100*sqrt(sig2PW*Mean**powerdist)/Mean
text      dist ; distribution
if distribution.eqs.'negative'
    expressio esig2 ; !e(qsig2 = sig2NB)
    expressio evar ; !e(qvar = qmean + qsig2*qmean*qmean)
  elsif distribution.eqs.'opoisson'
    expressio esig2 ; !e(qsig2 = sig2OP)
    expressio evar ; !e(qvar = qsig2*qmean)
  elsif distribution.eqs.'power'
    text      dist ; 'negative'
    expressio esig2 ; !e(qsig2 = sig2PW*qmean**(powerdist-2) - 1/qmean)
    expressio evar  ; !e(qvar = sig2PW*qmean**powerdist)
  elsif distribution.eqs.'poisson'
    text      dist ; 'poisson'
    expressio esig2 ; !e(qsig2 = 1)
    expressio evar ; !e(qvar = qmean)
  else
    fault     [diag=fault ; expl=!t('Wrong setting of distribution')]
endif
print     Mean, cvPO, cvOP, cvNB, cvPW

" Deal with blocking random effect "
if (design.eqs.'randomized')
    calculate sig2Block = 0
  elsif design.eqs.'block'
    if (cvBlock.le.0)
        text      design ; 'randomized'
        calculate sig2Block = 0
      else
        calculate sig2Block = log((cvBlock/100)**2 + 1)
    endif
  elsif design.eqs.'splitplot'
    fault   [expl=!t('Misspecification of design')]
  else
    fault   [expl=!t('Misspecification of design')]
endif
calculate sigBlock = sqrt(sig2Block)

" Print effective replication "
calculate nCMP = sum(abs(comparison)) - (nGMO = sum(dum[1]))
variate   nRepsGMO, nRepsCMP ; nGMO,nCMP*nBlocks ; deci=0
print     nBlocks, nRepsGMO, nRepsCMP ; decimals=0

" Create grid for looping Loop over Loc/nBlocks values "
calculate loglowerLOC, logupperLOC = log(lowerLOC, upperLOC)
fgrid     [minimum=loglowerLOC ; maximum=logupperLOC ; ngrid=ngridLOC] gridRatio
calculate gridRatio[] = exp(gridRatio[])
fgrid     [values=gridRatio[], nBlocks] grid
variate   Ratio, nReps ; grid[] ; deci=*,0
decimals  Ratio

" Number of observations and critical value Chi "
calculate critvalChi = edchi(1-alfa ; 1)

" Structures to store results "
calculate doLN, doSQ, doOP, doNB = 'LN', 'SQ', 'OP', 'NB' .in. models
calculate nloop = nvalues(Ratio)
variate   [nvalues=nloop ; values=#nloop(*)] powLN, powSQ, powPO, powOP, powNB, \
          powLNe, powSQe, powPOe, powOPe, powNBe ; deci=3
variate   [nvalues=nloop ; values=#nloop(*)] meanVarLN, meanVarSQ, meanVarOP, \
          LNnc,SQnc,POnc,OPnc,NBnc, LNnce,SQnce,POnce,OPnce,NBnce, resDf, nData

" Main looping "
for [ntimes=nloop ; index=ii]

  " Create Design for number of reps "
  scalar    iiRatio, iiReps ; (Ratio, nReps)$[ii]
  calculate iiplots = iiReps*nplots
  factor    [nvalues=iiplots ; levels=iiReps] qBlock
  factor    [nvalues=iiplots ; levels=nplots] qPlot
  generate  qBlock, qPlot
  variate   [nvalues=iiReps] ranBlock
  pointer   [nvalues=ndum] qdum, zdum
  variate   [nvalues=iiplots] qdum[], qmean, qcomparison, qsig2, qvar
  equate    Mean, comparison, dum[] ; qmean, qcomparison, qdum[]

  " Apply Ratio effect"
  calculate qmean = ((1-qdum[1]) + qdum[1]*iiRatio) * qmean

  " Apply Blocking effect by means of Blom scores "
  if design.eqs.'block'
    variate   [values=1...#iiReps] blockeff
    calculate blockeff = exp(sigBlock*ned((blockeff-0.375)/(iiReps+0.25)))
    calculate qmean = qmean * newlevels(qBlock ; blockeff)
  endif

  " Calculate dispersion parameter (necessary for power distribution "
  calculate #esig2
  calculate #evar
  if 0
    print     sig2PW, powerdist, qmean, qsig2, qvar
  endif

  " Looping over DIFFERENT values in qmean "
  groups    qmean ; fMean ; levels=levMean
  calculate nlevMean = nvalues(levMean)
  variate   [nvalues=nlevMean] nobs, sumww, factor ; deci=0,4,0
  variate   [nvalues=iiplots] eeLN, vvLN, eeSQ, vvSQ
  pointer   [nvalues=iiplots] ww, yy
  print levMean

  for [ntimes=nlevMean ; index=jj]
    scalar    kmean ; (levMean)$[jj]
    restrict  qsig2,qvar ; qmean.eq.kmean
    calculate ksig2 = mean(qsig2)
    calculate ksd = sqrt(mean(qvar))
    restrict  qsig2, qvar
    for ff=5,7,9,11,15
      calculate factor$[jj] = ff
      calculate lowcount = bound(floor(kmean - ff*ksd) ; 0 ; mis)
      calculate uppcount = ceiling(kmean + ff*ksd)
      calculate nobs$[jj] = uppcount - lowcount + 1
      variate   [values=#lowcount...#uppcount] yydum, wwdum
      cntprobab [dist=#dist] yydum ; mean=kmean ; disp=ksig2 ; prob=wwdum
      calculate sumww$[jj] = (ksumww = sum(wwdum))
      exit      [control=for] (ksumww.gt.minimumSum)
    endfor
    " Copy values "
    restrict  qmean ; qmean.eq.kmean ; saveset=saveset
    restrict  qmean
    calculate yy[#saveset] = yydum
    calculate ww[#saveset] = wwdum
    " For LN and SQ "
    calculate ee1 = sum(wwdum * log(yydum+1))
    calculate vv1 = sum(wwdum * (log(yydum+1)-ee1)**2)
    calculate (eeLN)$[saveset] = ee1
    calculate (vvLN)$[saveset] = vv1
    calculate ee1 = sum(wwdum * sqrt(yydum))
    calculate vv1 = sum(wwdum * (sqrt(yydum)-ee1)**2)
    calculate (eeSQ)$[saveset] = ee1
    calculate (vvSQ)$[saveset] = vv1
  endfor
  if 1
    print levMean, nobs, sumww, factor
    print eeLN, vvLN, eeSQ, vvSQ
  endif

  calculate (meanVarLN, meanVarSQ)$[ii] = mean(vvLN, vvSQ)
  calculate meanVarOP$[ii] = mean(qvar/qmean)
  variate   response, weight ; !(#yy), !(#ww)
  calculate nData$[ii] = nvalues(response)

  " Expand design and define model "
  dump fMean, nobs
  variate   fullNobs ; newlevels(fMean ; nobs)
  fexpand   !(1...#iiplots) ; nobs=fullNobs ; factor=id
  factor    [modify=yes] id ; decimals=0
  fexpand   qdum[] ; nobs=fullNobs ; variate=zdum[]
  variate   [modify=yes] zdum[] ; decimals=0
  fclassifi [out=modelH1] zdum[]

  if nModifiers
    duplicate Modifiers ; qModifiers ; values=!((#Modifiers)#iiReps)
    fexpand   !(#qModifiers) ; nobs=fullNobs ; factor=zModifiers
    factor    [modify=yes] zModifiers ; decimals=0
    fclassifi [out=modelH1] #modelH1 + zModifiers
  endif

  if design.eqs.'block'
      fexpand   !(#qBlock) ; nobs=fullNobs ; factor=zBlock
      factor    [modify=yes] zBlock ; decimals=0
      fclassifi [out=modelH1] #modelH1 + zBlock
      calculate npars = nParameters + iiReps - 1
    else
      calculate npars = nParameters
  endif

  " Define models; ensure that zdum[1] is last parameter "
  fclassifi [out=modelH0] #modelH1 - zdum[1]
  fclassifi [out=modelH1] #modelH0 + zdum[1]

  " Degrees of freedom for residual; critical F "
  calculate resDf$[ii] = (iidf = iiplots - npars)
  calculate critvalF = edf(1-alfa ; 1 ; iidf)

  " Calculate offsets for equivalence testing "
  variate   lowOffset,uppOffset ; (loglowerLOC,logupperLOC) * (zdum[1].eq.1)

  " Ready to fit the models "
  " LN: logarithmic transformation "
  variate   tresponse ; log(response+1)
  calculate meanVariance = mean(vvLN)
  model     [dist=normal ; weight=weight] tresponse
  terms     #modelH1
  fit       [print=* ; nomes=lev,res,disp] #modelH0
  rkeep     dev=dev0 ; df=df0
  add       [print=* ; nomes=lev,res,disp] zdum[1]
  rkeep     dev=dev1 ; df=df1
  \rdisplay  [print=acc]
  calculate LNnc$[ii] = (noncentral = bound((dev0-dev1)/meanVariance; 0; mis))
  calculate powLN$[ii] = (power = cuf(critvalF ; 1 ; iidf ; noncentral))

  " SQ: squared root transformation "
  variate   tresponse ; sqrt(response)
  calculate meanVariance = mean(vvSQ)
  model     [dist=normal ; weight=weight] tresponse
  terms     #modelH1
  fit       [print=* ; nomes=lev,res,disp] #modelH0
  rkeep     dev=dev0 ; df=df0
  add       [print=* ; nomes=lev,res,disp] zdum[1]
  rkeep     dev=dev1 ; df=df1
  calculate SQnc$[ii] = (noncentral = bound((dev0-dev1)/meanVariance; 0; mis))
  calculate powSQ$[ii] = (power = cuf(critvalF ; 1 ; iidf ; noncentral))

  " PO: Poisson "
  model     [dist=poisson ; weight=weight] response
  terms     #modelH1
  fit       [print=* ; nomes=lev,res,disp] #modelH0
  rkeep     dev=dev0 ; df=df0
  add       [print=* ; nomes=lev,res,disp] zdum[1]
  rkeep     dev=dev1 ; df=df1 ; esti=esti
  calculate POnc$[ii] = (noncentral = bound(dev0 - dev1 ; 0 ; mis))
  calculate powPO$[ii] = (power = cuchi(critvalChi ; 1 ; noncentral))
  \print     noncentral, power

  " PO: equivalence "
  calculate effGMO = esti$[npars]
  if (effGMO.le.0)
      model     [dist=poisson ; weight=weight ; offset=lowOffset] response
    else
      model     [dist=poisson ; weight=weight ; offset=uppOffset] response
  endif
  fit       [print=*] #modelH0
  rkeep     dev=dev0 ; df=df0
  calculate POnce$[ii] = (noncentral = bound(dev0 - dev1 ; 0 ; mis))
  calculate powPOe$[ii] = (power = cuchi(critvalChi ; 1 ; noncentral))

  " OP: overdipsersed Poisson "
  " Note that OP needs not to be fitted because deviances are identical to PO "
  calculate meanVariance = mean(qvar/qmean)
  model     [dist=poisson ; dispersion=meanVariance ; weight=weight] response
  terms     #modelH1
  fit       [print=* ; nomes=lev,res,disp] #modelH0
  rkeep     dev=dev0 ; df=df0
  add       [print=* ; nomes=lev,res,disp] zdum[1]
  rkeep     dev=dev1 ; df=df1 ; esti=esti
  calculate OPnc$[ii] = (noncentral = bound((dev0-dev1)/meanVariance; 0; mis))
  calculate powOP$[ii] = (power = cuf(critvalF ; 1 ; iidf ; noncentral))
  \print     noncentral, power

  " OP: equivalence "
  calculate effGMO = esti$[npars]
  if (effGMO.le.0)
      model     [dist=poisson ; weight=weight ; offset=lowOffset] response
    else
      model     [dist=poisson ; weight=weight ; offset=uppOffset] response
  endif
  fit       [print=*] #modelH0
  rkeep     dev=dev0 ; df=df0
  calculate OPnce$[ii] = (noncentral = bound((dev0-dev1)/meanVariance; 0; mis))
  calculate powOPe$[ii] = (power = cuf(critvalF ; 1 ; iidf ; noncentral))

  " NB: negative binomial "
  calculate dev0,dev1 = mis
  model     [dist=negative ; link=log ; weight=weight] response
  r2negbin  [print=* ; _2log=dev0 ; nomes=lev,res,disp] #modelH0
  r2negbin  [print=* ; _2log=dev1 ; nomes=lev,res,disp] #modelH1
  rkeep     exit=exit ; esti=esti
  calculate NBnc$[ii] = (noncentral = bound(dev0 - dev1 ; 0 ; mis))
  calculate powNB$[ii] = (power = cuchi(critvalChi ; 1 ; noncentral))
  \print     noncentral, power

  " NB: equivalence "
  calculate effGMO = esti$[npars]
  if (effGMO.le.0)
      model     [dist=negative ; link=log ; weight=weight ; offset=lowOffset] \
                response
    else
      model     [dist=negative ; link=log ; weight=weight ; offset=uppOffset] \
                response
  endif
  r2negbin  [print=* ; _2log=dev0 ; nomes=lev,res,disp] #modelH0
  calculate NBnce$[ii] = (noncentral = bound(dev0 - dev1 ; 0 ; mis))
  calculate powNBe$[ii] = (power = cuchi(critvalChi ; 1 ; noncentral))
endfor
print     Ratio, nReps, meanVarLN, meanVarSQ, meanVarOP, nData

" Degrees of freedom "
calculate nPlots = nReps*nplots
if design.eqs.'block'
    calculate nPars = nParameters + nReps - 1
  else
    calculate nPars = nParameters
endif
calculate nDf = nPlots - nPars

" Assume proportionality between nReps and noncentrality parameter "
groups    Ratio,nReps ; fRatio,fReps ; levels=levRatio,levReps
variate   [nvalues=nloop] pwLN, pwSQ, pwPO, pwOP, pwNB, pwPOe, pwOPe, pwNBe ; \
          deci=3
if nvalues(nBlocks).gt.1
  for yyy=  LNnc,  SQnc,  POnc,  OPnc,  NBnc,  POnce,  OPnce,  NBnce ; \
      zzz= zLNnc, zSQnc, zPOnc, zOPnc, zNBnc, zPOnce, zOPnce, zNBnce ; \
      pow= powLN, powSQ, powPO, powOP, powNB, powPOe, powOPe, powNBe ; \
      pw=   pwLN,  pwSQ,  pwPO,  pwOP,  pwNB,  pwPOe,  pwOPe,  pwNBe ; \
      type= 'F',   'F',  'Chi',  'F', 'Chi',  'Chi',    'F',  'Chi'
    calculate zzz = yyy
    restrict  zzz ; nReps.ne.min(nReps)
    calculate zzz = 0/0
    restrict  zzz
    tabulate  [class=fRatio] zzz/nReps ; mean=meanNc
    tabulate  [class=fRatio,fReps] nReps ; mean=meanReps
    calculate meanReps = meanNc * meanReps
    equate    meanReps ; zzz
    if (type.eqs.'F')
        calculate critVal =   edf((1-alfa)*nDf/nDf ; 1 ; nDf)
        calculate pw = cuf(critVal ; 1 ; nDf ; zzz)
      else
        calculate critVal = edchi((1-alfa)*nDf/nDf ; 1)
        calculate pw = cuchi(critVal ; 1 ; zzz)
    endif
    calculate maxdiff = max(abs(pow-pw))
    print     !p(yyy), maxdiff ; deci=3
  endfor
endif
" Relationship between Noncentrality and nReps "
print     Ratio, nReps, LNnc, SQnc, POnc, OPnc, NBnc ; field=12
print     Ratio, nReps, LNnce, SQnce, POnce, OPnce, NBnce ; field=12
groups    Ratio ; fRatio
fframe    [rows=2 ; columns=2]
calculate lognReps = log(nReps)
for yyy=LNnc, SQnc, POnc, OPnc, NBnc, POnce, OPnce, NBnce ; \
        tt1='LN', 'SQ', 'PO', 'OP', 'NB', 'PO', 'OP', 'NB' ; \
        tt2=5('Difference'),3('Equivalence')
  model     yyy
  fit       [print=sum, esti ; nomes=lev,res,disp] fRatio*nReps
  txconstru [title] tt1, ' ', tt2, ' Test'
  rgraph    [title=title ; win=1 ; scr=c]

  subset    [yyy.gt.0 ; set=yes] yyy, fRatio,lognReps ; qyyy,qfRatio,qlognReps
  model     log(qyyy)
  fit       [print=sum,esti ; nomes=lev,res,disp] qfRatio + qlognReps
  txconstru [title] tt1, ' ', tt2, ' Test'
  rgraph    [title=title ; win=2 ; scr=k]
endfor

for [index=ii] ll=#levRatio
  restrict  nReps ; fRatio.eq.ll
  if (ii.eq.1)
      text      iprint ; 'id'
      skip      [filetype=output] 1
    else
      text      iprint ; ''
  endif
  print     [squash=yes ; iprint=#iprint] Ratio, nReps, \
            powLN,powSQ,powPO,powOP,powNB, powPOe,powOPe,powNBe ; \
            fi=2(7),(10,8,8,8,8)1,(10,8,8)1
  skip      [filetype=output] 1
endfor
restrict  nReps


if nvalues(nBlocks).gt.1
  for [index=ii] ll=#levRatio
    restrict  nReps ; fRatio.eq.ll
    if (ii.eq.1)
        text      iprint ; 'id'
        skip      [filetype=output] 1
      else
        text      iprint ; ''
    endif
    print     [squash=yes ; iprint=#iprint] Ratio, nReps, \
              pwLN,pwSQ,pwPO,pwOP,pwNB, pwPOe,pwOPe,pwNBe ; \
              fi=2(7),(10,8,8,8,8)1,(10,8,8)1
    skip      [filetype=output] 1
  endfor
  restrict  nReps
endif

export    [out='ToolLyles.xlsx' ; method=over ; sheet='Noncentral'] \
          Ratio, nReps, nDf, LNnc, SQnc, POnc, OPnc, NBnc, POnce, OPnce, NBnce

export    [out='ToolLyles.xlsx' ; method=add ; sheet='Power'] \
          Ratio, nReps, powLN,powSQ,powPO,powOP,powNB, powPOe,powOPe,powNBe
stop

