"
  Dummy[1] : difference between GMO and Comparator
  Dummy[2] : common GMO and Comparator parameter
              Dum1  Dum2  Dum3  Dum4
  GMO            1     1     0     0
  Comparator     0     1     0     0
  V3             0     0     1     0
  V4             0     0     0     1
"
scalar    nLevelsVariety ; 3
variate   [values=2,3] nLevelsAdditionalTreats
variate   [values=1,0] Interaction
variate   [values=0,1] Modifier

scalar    cvBlock ; 0
scalar    meanComparator ; 50
scalar    cvComparator ; 20
scalar    sdInteraction  ; 4
scalar    power ; 1.5
text      distribution ; 'opoisson'
text      distribution ; 'power'
text      distribution ; 'poisson'
text      distribution ; 'negative'

scalar    lowLoc ; 0.5
scalar    uppLoc ; 2
scalar    LocNsteps ; 9
variate   nBlocks ; !(10)
variate   nBlocks ; !(2,3,4)
scalar    ndatasets ; 100
scalar    nGCI ; 10000            " Number of draws for Gen. Conf. Interval "
scalar    alfa ; 0.05
scalar    limPowerDiff ; 2
text      models ; !t(LN,NB)
text      models ; !t(LN,SQ)
text      models ; !t(LN,SQ,OP)
text      models ; !t(LN,SQ,OP,NB)

scalar    seed ; 342894

" Faults "
scalar    mis ; *
fault     [diag=fault ; expla=!t('Interaction must have values 0 or 1')] \
          sum(Interaction.ni.!(0,1))
fault     [diag=fault ; expla=!t('Modifier must have values 0 or 1')] \
          sum(Modifier.ni.!(0,1))
fault     [diag=fault ; expla=!t('Interaction and Modifier simultaneously equal to 1')] \
          sum((Interaction+Modifier).gt.1)
setoption [fit] nomessage ; !t(res,lev,disp)
setoption [add] nomessage ; !t(res,lev,disp)
setoption [r2negbinomial] nomessage ; !t(warnings)

variate   perc ; 100 * (!(0,1) + !(1,-1)*alfa/2)

" Initialize "
calculate init = urand(seed ; 1)
calculate loglowLoc, loguppLoc = log(lowLoc, uppLoc)

" Generate design "
text      labelsVariety ; !t(GMO, Comparator, V3, V4, V5, V6, V7, V8, V9, V10)
text      labVariety ; labelsVariety$[!(1...nLevelsVariety)]
factor    [levels=nLevelsVariety ; labels=labVariety] Variety

if nmv(nLevelsAdditionalTreats)
    pointer   [values=Variety] factors
    calculate nplots = nLevelsVariety
  else
    calculate nplots = nLevelsVariety * round(exp(sum(log(nLevelsAdditionalTreats))))
    for [index=ii] nl=#nLevelsAdditionalTreats
      factor    [levels=nl] Treat[ii]
    endfor
    pointer   [values=Variety, Treat[]] factors
endif
factor    [nvalues=nplots ; levels=1 ; values=#nplots(1)] block
factor    [nvalues=nplots ; levels=nplots ; values=1...nplots] plot
factor    [modify=yes ; nvalues=nplots] factors[]
generate  factors[]
print     factors[]

" Interactions with Variety "
variate   [nvalues=nplots ; values=#nplots(#meanComparator)] mean
variate   comparison ; (Variety.in.1) - (Variety.in.2) ; deci=0
if sum(Interaction)
    restrict  nLevelsAdditionalTreats ; Interaction ; saveset=save
    calculate nrandom = nLevelsVariety * round(exp(sum(log(nLevelsAdditionalTreats))))
    variate   random ; grnormal(nrandom ; meanComparator ; sdInteraction**2)
    calculate random = round(10*random)/10
    facproduc !p(Variety, Treat[#save]) ; combined
    calculate mean = newlevels(combined ; random)
    facproduc !p(Treat[#save]) ; interactionTreat
    calculate nInteract = nlevels(interactionTreat)
    calculate z1 = (Variety.in.1).and.(interactionTreat.EQ.1)
    calculate z2 = (Variety.in.2).and.(interactionTreat.in.!(2,nInteract))
    calculate comparison = z1 - z2
    calculate dummy[1] = z1
    calculate dummy[2] = z1+z2
    subset    [dummy[2].eq.0 ; setlevels=yes] combined ; subcombined
    getattrib [attribute=levels,labels] subcombined ; save=levels
    scalar    idum ; 2
    for ll=#levels['levels']
      calculate idum=idum+1
      calculate dummy[idum] = combined.in.ll
    endfor
    if 1
      print     Variety, interactionTreat, combined, z1, z2, dummy[] ; deci=0
    endif
    formula   VarietyModel ; !f(interactionTreat*Variety)
  else
    formula   VarietyModel ; !f(Variety)
    pointer   [nvalues=nLevelsVariety] dummy
    calculate dummy[] = Variety.in.1...nLevelsVariety
    calculate dummy[2] = Variety.in.!(1,2)
    if 1
      print     Variety, dummy[] ; deci=0
    endif
endif
calculate ndummy, ndummy1 = nvalues(dummy) - (0,1)

"
  dummy[2] is gemeenschappelijke GMO en Comparator
  dummy[1] is verschil tussen GMO en Comparator
"

" Set comparison to default values "
restrict  mean ; comparison.ne.0
calculate mean = meanComparator
restrict  mean

" Set extra varieties to default value "
restrict  mean ; Variety.ni.!(1,2) ; null=null
if (null.eq.0)
  calculate mean = 10
endif
restrict  mean
print     factors[], mean, comparison 

" Modifiers "
if sum(Modifier)
    restrict  nLevelsAdditionalTreats ; Modifier ; saveset=save
    calculate nrandom = round(exp(sum(log(nLevelsAdditionalTreats))))
    variate   random ; urand(0 ; nrandom)
    calculate random = round(10*random)/10
    calculate random = random + (1 - mean(random))
    print random
    facproduc !p(Treat[#save]) ; modifierTreat
    calculate factor = newlevels(modifierTreat ; random)
    calculate mean = factor * mean
    formula   ModModel ; !f(modifierTreat)
    formula   ModifierModel ; !f(qmodifierTreat)
    calculate nLevModifier = nlevels(modifierTreat)
  else
    factor    [nvalues=nplots ; levels=1 ; values=#nplots(1)] modifierTreat
    formula   ModModel ; !f(modifierTreat - modifierTreat)
    formula   ModifierModel ; !f(qmodifierTreat - qmodifierTreat)
    calculate nLevModifier = 0
endif
tabulate  [class=Variety, Treat[1] ; print=mean] mean
print     block, plot, factors[], mean, comparison

" Check "
variate   check ; mean
model     [dist=poisson] check
fit       [print=est] #VarietyModel + #ModModel
rkeep     lin=lp1
model     [dist=poisson] check
fit       [print=est ; constant=omit] dummy[2...#ndummy] + #ModModel
rkeep     lin=lp2
fit       [print=est ; constant=omit] dummy[] + #ModModel
rkeep     lin=lp3
calculate chk[1,2] = sum(abs(lp1 - lp2,lp3))
print     chk[1,2]

" Check with OFFSET "

calculate lowOffset = loglowLoc * (comparison.eq.1)
calculate uppOffset = loguppLoc * (comparison.eq.1)
model     [dist=poisson ; link=log ; offset=lowOffset] check
fit       [print=est ; constant=omit] dummy[2...#ndummy] + #ModModel
rkeep     lin=lp4
calculate ratio = exp(lp4-lp1)
restrict  factors[] ; abs(lp1 - lp4).gt.0.01
print     factors[], lp1, lp4, ratio
restrict  factors[]

" Check with effect for GMO : dummy[1] is effect of GMO "
restrict  check ; comparison.eq.1
calculate check = lowLoc*check
restrict  check
model     [dist=poisson] check
fit       [print=est ; constant=omit] dummy[] + #ModModel
rkeep     lin=lp4
calculate ratio = exp(lp4-lp1)
restrict  factors[] ; abs(lp1 - lp4).gt.0.01
print     factors[], lp1, lp4, ratio
restrict  factors[]

" Calculate overdispersion factor "
calculate sig2NB = (cvComparator/100)**2 - 1/meanComparator
calculate cvNB = 100*sqrt(mean + sig2NB*mean*mean)/mean
calculate sig2OP = (cvComparator/100)**2 * meanComparator
calculate cvOP = 100*sqrt(sig2OP*mean)/mean
calculate sig2PW = (cvComparator/100)**2 * meanComparator**(2-power)
calculate cvPW = 100*sqrt(sig2PW*mean**power)/mean
print     mean, cvNB, cvOP, cvPW
text      dist ; distribution
if distribution.eqs.'negative'
    calculate sig2, cvmean = sig2NB, cvNB
  elsif distribution.eqs.'opoisson'
    calculate sig2, cvmean = sig2OP, cvOP
  elsif distribution.eqs.'power'
    calculate cvmean = cvPW
    calculate sig2 = sig2PW*mean**(power-2) - 1/mean
    text      dist ; 'negative'
  elsif distribution.eqs.'poisson'
    calculate cvmean = sqrt(mean)/mean
    calculate sig2 = mis
    text      dist ; 'poisson'
  else
    fault     [diag=fault ; expl=!t('Wrong setting of distribution')]
endif
calculate sig2Block = log((cvBlock/100)**2 + 1)

" Loop over Loc/nBlocks values "
fgrid     [minimum=loglowLoc ; maximum=loguppLoc ; ngrid=LocNsteps] gridLOC
calculate gridLOC[] = exp(gridLOC[])
fgrid     [values=gridLOC[], nBlocks] grid
variate   LOC, nReps ; grid[] ; deci=*,0
decimals  LOC
calculate nCMP = sum(dummy[2]) - (nGMO = sum(dummy[1]))
variate   nRepsGMO, nRepsCMP ; nGMO,nCMP*nReps ; deci=0

" Effective replication"
print     LOC, nReps, nRepsGMO, nRepsCMP

calculate nloop = nvalues(LOC)
calculate nfactors = nvalues(factors)
pointer   [nvalues=nfactors] qfactors
duplicate factors[], modifierTreat ; qfactors[], qmodifierTreat
pointer   [nvalues=ndummy] qdummy

variate   [nvalues=nloop] powLN, powSQ, powOP, powNB, powOPe, \
          powLNe, powSQe, powNBe ; deci=3
calculate powLN, powSQ, powOP, powNB, powOPe, powLNe, powSQe, powNBe = mis
calculate doLN, doSQ, doOP, doNB = 'LN', 'SQ', 'OP', 'NB' .in. models

scalar    ii ; 0
calculate nnBlocks = nvalues(nBlocks)
for [ntimes=LocNsteps]
  scalar    minPower ; 0
  for [ntimes=nnBlocks]
    " Create Design "
    calculate ii = ii + 1
    exit      [control=for ; repeat=yes] minPower.gt.limPowerDiff
    scalar    iiLOC, iiReps ; (LOC, nReps)$[ii]
    calculate iiplots = iiReps*nplots
    factor    [nvalues=iiplots ; levels=iiReps] qBlock
    factor    [nvalues=iiplots ; levels=nplots] qPlot
    generate  qBlock, qPlot
    variate   [nvalues=iiReps] ranBlock
    factor    [nvalues=iiplots ; modify=yes] qfactors[], qmodifierTreat
    variate   [nvalues=iiplots] qmean, qcomparison, qsig2, qdummy[], \
              yy, logyy, sqrtyy, qmeanBlock, lowOffset, uppOffset
    equate    mean, comparison, sig2, factors[], modifierTreat, dummy[] ; \
              qmean,qcomparison,qsig2,qfactors[],qmodifierTreat, qdummy[]
    calculate lowOffset = loglowLoc * (qcomparison.eq.1)
    calculate uppOffset = loguppLoc * (qcomparison.eq.1)
    restrict  qmean ; qcomparison.eq.1
    calculate qmean = iiLOC*qmean
    restrict  qmean
    if 0
      print     qBlock, qPlot, qfactors[], qmean, qcomparison
    endif

    " Define models  "
    " Dummies for modifierTreat are necessary because constant=omit "
    if nLevModifier
        pointer   [nvalues=nLevModifier] qmodifier
        calculate qmodifier[] = qmodifierTreat.eq.1...nLevModifier
        fclassifi [out=modelH1] qdummy[] + qmodifier[] - qmodifier[1]
        fclassifi [out=modelH0] qdummy[] + qmodifier[] - qmodifier[1] - qdummy[1]
      else
        fclassifi [out=modelH1] qdummy[]
        fclassifi [out=modelH0] qdummy[] - qdummy[1]
    endif

    " Simulate in a loop "
    variate   [nvalues=ndatasets ; values=#ndatasets(*)] efGMO, \
              fLN,fSQ,fOP,fNB, LNe,SQe,OPe,NBe ; deci=2
    variate   [nvalues=ndatasets ; values=#ndatasets(*)] exOP,exNB ; deci=0

    " Dummy fit to obtain degrees of freedom "
    model     qmean
    fit       [print=* ; constant=omit] #modelH1
    rkeep     df=df1
    calculate critvalChi = edchi(1-alfa ; 1)
    calculate critvalF = edf(1-alfa ; 1 ; df1)
    calculate nCMP = sum(qdummy[2]) - (nGMO = sum(qdummy[1]))

    for [ntimes=ndatasets ; index=kk]
      " Simulate "
      calculate ranBlock = grnormal(iiReps ; 0 ; sig2Block)
      calculate qmeanBlock = qmean * exp(newlevels(qBlock ; ranBlock))
      cntgrando [dist=#dist] qmeanBlock ; dispersion=qsig2 ; numbers=yy
      \tabulate  [class=qfactors[1] ; print=mean] yy

      " Analyse  "
      if doLN.or.doSQ     " LN & SQ difference testing "
        calculate logyy = log(yy+1)
        calculate sqrtyy = sqrt(yy)
        model     logyy, sqrtyy
        terms     #modelH1
        fit       [print=* ; constant=omit] #modelH1
        rkeep     dev=qdev1[1,2] ; esti=qesti[1,2] ; se=qse[1,2]
        calculate (fLN, fSQ)$[kk] = (qesti[]$[1]/qse[]$[1])**2
        " Equivalence testing by means of GCI "
        calculate logGMO, logCMP = (1,0)*qesti[1]$[1] + qesti[1]$[2] 
        calculate sqrGMO, sqrCMP = (1,0)*qesti[2]$[1] + qesti[2]$[2] 
        calculate GCIchi[1,2] = qdev1[1,2] / grchi(nGCI ; df1)
        calculate qlogGMO, qlogCMP, qsqrGMO, qsqrCMP = grnormal(nGCI ; \
                  logGMO, logCMP, sqrGMO, sqrCMP ; 2(GCIchi[1,2])/(nGMO,nCMP))
        calculate qlogGMO, qlogCMP = \
                  bound(exp(qlogGMO, qlogCMP + GCIchi[1]/2) - 1 ; 0.0001 ; mis)
        calculate qsqrGMO, qsqrCMP = qsqrGMO,qsqrCMP*qsqrGMO,qsqrCMP + GCIchi[2]
        calculate qlogGMO,qsqrGMO = qlogGMO,qsqrGMO / qlogCMP, qsqrCMP
        calculate logPerc, sqrPerc = percentiles(qlogGMO,qsqrGMO ; perc)
        calculate (LNe, SQe)$[kk] = ((logPerc,sqrPerc)$[1].gt.lowLoc) .and. \
                  ((logPerc,sqrPerc)$[2].lt.uppLoc)
      endif
      if doOP     " OP difference testing "
        calculate dev0,dev1 = mis
        model     [distribution=poisson ; dispersion=*] yy
        terms     #modelH1
        fit       [print=* ; constant=omit] #modelH1
        rkeep     dev=dev1 ; exit=exit ; esti=esti
        calculate effGMO = esti$[1]
        calculate efGMO$[kk] = effGMO
        drop      [print=*] qdummy[1]
        rkeep     dev=dev0
        calculate exOP$[kk] = exit
        calculate fOP$[kk] = (dev0-dev1) / (dev1/df1)

        " OP equivalence Test "
        if (effGMO.le.loglowLoc) .or. (effGMO.ge.loguppLoc)
            calculate OPe$[kk] = 0
          elsif (effGMO.le.0)
            model     [dist=poisson ; dispersion=* ; offset=lowOffset] yy
            fit       [print=* ; constant=omit] #modelH0
            rkeep     dev=dev0
            calculate Ftest = (dev0-dev1) / (dev1/df1)
            calculate OPe$[kk] = Ftest.gt.critvalF
          elsif (effGMO.ge.0)
            model     [dist=poisson ; dispersion=* ; offset=uppOffset] yy
            fit       [print=* ; constant=omit] #modelH0
            rkeep     dev=dev0
            calculate Ftest = (dev0-dev1) / (dev1/df1)
            calculate OPe$[kk] = Ftest.gt.critvalF
          else
            FAULT   [diag=fault ; expl=!t('Not possible')]
        endif
      endif
      if doNB     " NB difference testing "
        calculate dev0,dev1 = mis
        model     [distribution=negative ; link=log] yy
        r2negbin  [print=* ; _2log=dev1 ; constant=omit] #modelH1
        rkeep     exit=exit ; esti=esti
        calculate effGMO = esti$[1]
        r2negbin  [print=* ; _2log=dev0 ; constant=omit] #modelH0
        calculate exNB$[kk] = exit
        calculate fNB$[kk] = (dev0-dev1)

        " NB equivalence Test "
        if (effGMO.le.loglowLoc) .or. (effGMO.ge.loguppLoc)
            calculate NBe$[kk] = 0
          elsif (effGMO.le.0)
            model     [dist=negative ; link=log ; offset=lowOffset] yy
            r2negbin  [print=* ; _2log=dev0 ; constant=omit] #modelH0
            calculate Chitest = (dev0-dev1)
            calculate NBe$[kk] = Chitest.gt.critvalChi
          elsif (effGMO.ge.0)
            model     [dist=negative ; link=log ; offset=uppOffset] yy
            r2negbin  [print=* ; _2log=dev0 ; constant=omit] #modelH0
            calculate Chitest = (dev0-dev1)
            calculate NBe$[kk] = Chitest.gt.critvalChi
          else
            FAULT   [diag=fault ; expl=!t('Not possible')]
        endif

      endif
      \exit [co=for] (kk.eq.1)
    endfor
    calculate curLN,curSQ,curOP,curNB = \
              mean(fLN,fSQ,fOP,fNB.gt.3(critvalF),critvalChi)
    calculate (powLN,powSQ,powOP,powNB)$[ii] = curLN,curSQ,curOP,curNB
    calculate minPower = min(!(curLN,curSQ,curOP,curNB))
    calculate (powOPe,powLNe,powSQe,powNBe)$[ii] = mean(OPe, LNe, SQe, NBe)
  endfor
endfor

groups  LOC ; fLOC ; levels=levLOC
for [index=ii] ll=#levLOC
  restrict  nReps ; fLOC.eq.ll
  if (ii.eq.1)
      text      iprint ; 'id'
      skip      [filetype=output] 1
    else
      text      iprint ; ''
  endif
  print     [squash=yes ; iprint=#iprint] LOC, nReps, powLN,powSQ,powOP,powNB, \
            powLNe,powSQe,powOPe,powNBe ; fi=2(7),(10,8,8,8)2
  skip      [filetype=output] 1
endfor
stop
