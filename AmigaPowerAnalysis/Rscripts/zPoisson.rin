# Returns a random sample from a count distribution
# Sampling from the Powerlaw distribution employs the negative binomial distribution
# No error checking is performed
# - The sample size n must be a positive integer
# - The mean must be positive and must be a scalar or a vector of length n
# - The dispersion parameter must be valid (see function ropoissonDispersion) and must be a scalar or a vector of length n
# - The power must be in the interval [1,2] and must be a scalar or a vector of length n
ropoisson = function(n, mean, dispersion=NaN, power=NaN, 
      distribution=c("Poisson", "OverdispersedPoisson", "NegativeBinomial", "PoissonLogNormal", "PowerLaw")) {
  type = match.arg(distribution)
  if (type == "Poisson") {
    sample = rpois(n, mean)

  } else if (type == "OverdispersedPoisson") {
    s = dispersion - 1
    a = mean/s
    sample = rgamma(n, shape=a, scale=s)
    sample = rpois(n, sample)

  } else if (type == "NegativeBinomial") {
    s = dispersion*mean
    a = mean/s
    sample = rgamma(n, shape=a, scale=s)
    sample = rpois(n, sample)

  } else if (type == "PoissonLogNormal") {
    mu     = log(mean) - log(dispersion+1)/2
    sigma  = sqrt(log(dispersion+1))
    sample = exp(rnorm(n, mu, sigma))
    sample = rpois(n, sample)

  } else if (type == "PowerLaw") {
    dispNegbin = (dispersion*mean^power - mean)/(mean*mean)
    if (min(dispNegbin) <= 0) {
      stop(cat("For some parameters of the PowerLaw distribution the calculated dispersion parameter of the negative binomial distribution is not positive.\n"), call.=TRUE)
    }
    # Use negative binomial
    s = dispNegbin*mean
    a = mean/s
    sample = rgamma(n, shape=a, scale=s)
    sample = rpois(n, sample)
  }
  return(sample)
}

# Returns the variance of the count distribution
# No error checking is performed
ropoissonVariance = function(mean, dispersion=NaN, power=NaN, 
      distribution=c("Poisson", "OverdispersedPoisson", "NegativeBinomial", "PoissonLogNormal", "PowerLaw")) {
  type = match.arg(distribution)
  if (type == "Poisson") {
    variance = mean
  } else if (type == "OverdispersedPoisson") {
    variance = dispersion*mean
  } else if (type == "NegativeBinomial") {
    variance = mean + dispersion*mean*mean
  } else if (type == "PoissonLogNormal") {
    variance = mean + dispersion*mean*mean
  } else if (type == "PowerLaw") {
    variance = dispersion*mean^power
  }
  return(variance)
}

# Returns the dispersion parameter of a count distribution from its mean and CV.
# It is implicitly assumed that all arguments are scalars although vectors of equal length are also allowed
# Performs error checking, i.e. checks that the calculated dispersion parameter is valid
ropoissonDispersion = function(mean, CV, power, 
      distribution=c("Poisson", "OverdispersedPoisson", "NegativeBinomial", "PoissonLogNormal", "PowerLaw")) {
  type = match.arg(distribution)
  if (min(mean) <= 0) {
    stop(cat("The Mean of the count distribution must be positive.\n"), call.=TRUE)
  }
  if (min(CV) <= 0) {
    stop(cat("The Coefficient of Variation of the count distribution must be positive.\n"), call.=TRUE)
  }

  if (type == "Poisson") {
    dispersion = NaN

  } else if (type == "OverdispersedPoisson") {
    dispersion = (CV/100) * (CV/100) * mean
    if (min(dispersion) <= 1) {
      stop(cat("The combination of mean and CV results in a dispersion parameter which is not larger than 1 for the OverdispersedPoisson distribution.\n"), call.=TRUE)
    }

  } else if (type == "NegativeBinomial") {
    dispersion = (CV/100) * (CV/100) - 1/mean
    if (min(dispersion) <= 0) {
      stop(cat("The combination of mean and CV results in a dispersion parameter which is not larger than 0 for the NegativeBinomial distribution.\n"), call.=TRUE)
    }

  } else if (type == "PoissonLogNormal") {
    dispersion = (CV/100) * (CV/100) - 1/mean
    if (min(dispersion) <= 0) {
      stop(cat("The combination of mean and CV results in a dispersion parameter which is not larger than 0 for the PoissonLogNormal distribution.\n"), call.=TRUE)
    }

  } else if (type == "PowerLaw") {
    if ((min(power) < 1) | (max(power) > 2)) {
	    stop(cat("The power parameter of the PowerLaw count distribution must be in the interval [1,2].\n"), call.=TRUE)
  	}
    dispersion = (CV/100) * (CV/100) * mean^(2-power)
    if (min(dispersion) <= 0) {
      stop(cat("The combination of mean and CV results in a dispersion parameter which is not larger than 0 for the PowerLaw distribution.\n"), call.=TRUE)
    }
  }
  return(dispersion)
}

