ropoisson = function(n, mean, dispersion=NaN, power=NaN, 
      distribution=c("Poisson", "OverdispersedPoisson", "NegativeBinomial", "PoissonLogNormal", "PowerLaw")) {
  
  stopifnot(n == as.integer(n), n >= 1, mean >= 0)
  if ((length(mean) != 1) && (length(mean) != n)) {
    stop("The length of mean must equal 1 or the value of n.", call. = FALSE)
  }
  if ((length(dispersion) != 1) && (length(dispersion) != n)) {
    stop("The length of dispersion must equal 1 or the value of n.", call. = FALSE)
  }
  mean[mean==0] = 1.0e-200
  if (min(mean) < 0) {
    stop("The mean must be positive.", call. = FALSE)
  }
  type = match.arg(distribution)
  if (type == "Poisson") {
    sample = rpois(n, mean)
  } else if (type == "OverdispersedPoisson") {
    if (min(dispersion) <= 1) {
      stop("The dispersion parameter must be larger than 1 for the OverdispersedPoisson distribution.", call. = FALSE)
    }
    s = dispersion - 1
    a = mean/s
    sample = rgamma(n, shape=a, scale=s)
    sample = rpois(n, sample)
  } else if (type == "NegativeBinomial") {
    if (min(dispersion) <= 0) {
      stop("The dispersion parameter must be larger than 0 for the NegativeBinomial distribution.", call. = FALSE)
    }
    s = dispersion*mean
    a = mean/s
    sample = rgamma(n, shape=a, scale=s)
    sample = rpois(n, sample)
  } else if (type == "PoissonLogNormal") {
    if (min(dispersion) <= 0) {
      stop("The dispersion parameter must be larger than 0 for the PoissonLogNormal distribution.", call. = FALSE)
    }
    lambda = log(mean) - log(dispersion+1)/2
    sigma2 = log(dispersion+1)
    sample = exp(rnorm(n, lambda, sqrt(sigma2)))
    sample = rpois(n, sample)
  } else if (type == "PowerLaw") {
    if (min(dispersion) <= 0) {
      stop("The dispersion parameter must be larger than 0 for the PowerLaw distribution.", call. = FALSE)
    }
    if ((power < 1) | (power > 2)) {
      stop("The power parameter must be interval [1,2].", call. = FALSE)
    }
    dispNegbin = (dispersion*mean^power - mean)/(mean*mean)
    if (min(dispNegbin) <= 0) {
      stop("For some parameters of the PowerLaw distribution the calculated dispersion parameter of the negative binomial distribution is not positive.", call. = FALSE)
    }
    # Use negative binomial
    s = dispNegbin*mean
    a = mean/s
    sample = rgamma(n, shape=a, scale=s)
    sample = rpois(n, sample)
  }
  return(sample)
}

ropoissonVariance = function(n, mean, dispersion=NaN, power=NaN, 
      distribution=c("Poisson", "OverdispersedPoisson", "NegativeBinomial", "PoissonLogNormal", "PowerLaw")) {
  type = match.arg(distribution)
  if (type == "Poisson") {
    variance = mean
  } else if (type == "OverdispersedPoisson") {
    variance = dispersion*mean
  } else if (type == "NegativeBinomial") {
    variance = mean + dispersion*mean*mean
  } else if (type == "PoissonLogNormal") {
    variance = mean + dispersion*mean*mean
  } else if (type == "PowerLaw") {
    variance = dispersion*mean^power
  }
  return(variance)
}

ropoissonDispersion = function(mean, CV, power, 
      distribution=c("Poisson", "OverdispersedPoisson", "NegativeBinomial", "PoissonLogNormal", "PowerLaw")) {
  if (mean <= 0) {
    stop("Mean of distribution must be positive.", call. = FALSE)
  }
  if (CV <= 0) {
    stop("Coefficient of Variation must be positive.", call. = FALSE)
  }

  type = match.arg(distribution)
  if (type == "PowerLaw") {
    if ((power < 1) | (power > 2)) {
	    stop("The power parameter must be interval [1,2].", call. = FALSE)
  	}
  }

  if (type == "Poisson") {
    dispersion = NaN
  } else if (type == "OverdispersedPoisson") {
    dispersion = (CV/100) * (CV/100) * mean
  } else if (type == "NegativeBinomial") {
    dispersion = (CV/100) * (CV/100) - 1/mean
  } else if (type == "PoissonLogNormal") {
    dispersion = (CV/100) * (CV/100) - 1/mean
  } else if (type == "PowerLaw") {
    dispersion = (CV/100) * (CV/100) * mean^(2-power)
  }
  return(dispersion)
}

