robinomial = function(n, probability, nbinomial, dispersion=NaN, 
      distribution=c("Binomial", "BetaBinomial", "BinomialLogitNormal")) {
  stopifnot(n == as.integer(n), n >= 1)
  stopifnot((probability > 0) && (probability < 1))
  stopifnot(nbinomial == as.integer(nbinomial), nbinomial >= 1)
  if ((length(probability) != 1) && (length(probability) != n)) {
    stop("Error: the length of probability must equal 1 or the value of n.")
  }
  if ((length(nbinomial) != 1) && (length(nbinomial) != n)) {
    stop("Error: the length of nbinomial must equal 1 or the value of n.")
  }
  if ((length(dispersion) != 1) && (length(dispersion) != n)) {
    stop("Error: the length of dispersion must equal 1 or the value of n.")
  }
  type = match.arg(distribution)
  if (type == "Binomial") {
    sample = rbinom(n, nbinomial, probability)
  } else if (type == "BetaBinomial") {
    stopifnot(dispersion > 1)
    phi = (dispersion-1)/(nbinomial-1)
    alfa = probability*(1-phi)/phi
    beta = (1-probability)*(1-phi)/phi
    sample = rbeta(n, shape1=alfa, shape2=beta)
    sample = rbinom(n, nbinomial, sample)
  } else if (type == "BinomialLogitNormal") {
    stopifnot(dispersion > 0)
    sample = plogis(rnorm(n, ownlogit(probability), sqrt(dispersion)))
    sample = rbinom(n, nbinomial, sample)
  }
  return(sample)
}

ownlogit = function(p) {
  return(log(p/(1-p)))
}

