# Load required packages and define additional source files with R functions
require(MASS)             # For negative binomial regression 
require(lsmeans)          # For forming predictions          
source = c("zBinomial.rin", "zPoisson.rin", "zMisc.rin")

# Retrieve parameters from call to R 
args = commandArgs(TRUE)
if (length(args) <= 1) {
  scriptsDirectory    = getwd()
  testdirectory = "../TestData/Technical Documentation/"
  testdirectory = "../TestData/Simple/"
  settingsfile = file.path(testdirectory, "0-Settings.csv")
  datafile     = file.path(testdirectory, "0-Input.csv")
  outputfile   = file.path(testdirectory, "0-Output.csv")
} else {
  scriptsDirectory = args[1]
  settingsfile = args[2]
  datafile     = args[3]
  outputfile   = args[4]
  logfile      = args[5]
  sink(logfile)
}

# Load additional R scripts which should be in the same directory
for (i in 1:length(source)) {
  source(file.path(scriptsDirectory, source[[i]]))
}

# Settings
settings = read.csv(settingsfile, header=FALSE, as.is=TRUE, strip.white=TRUE)
tel = 1
ComparisonId              = as.numeric(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
NumberOfComparisons       = as.numeric(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
Endpoint                  = as.character( as.vector(settings[[2]][tel]))             ; tel = tel + 1
LocLower                  = as.numeric(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
LocUpper                  = as.numeric(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
Distribution              = as.character( as.vector(settings[[2]][tel]))             ; tel = tel + 1
PowerLawPower             = as.numeric(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
OverallMean               = as.numeric(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
CVComparator              = as.numeric(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
CVBlocks                  = as.numeric(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
NumberOfInteractions      = as.numeric(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
NumberOfModifiers         = as.numeric(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
SignificanceLevel         = as.numeric(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
NumberOfEvaluationpoints  = as.numeric(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
NumberOfReplications      = as.numeric(unlist(strsplit(settings[[2]][tel], " ")))    ; tel = tel + 1
ExperimentalDesignType    = as.character( as.vector(settings[[2]][tel]))             ; tel = tel + 1
PowerCalculationMethod    = as.character( as.vector(settings[[2]][tel]))             ; tel = tel + 1
RandomNumberSeed          = as.numeric(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
NumberOfSimulatedDataSets = as.numeric(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
IsLogNormal               = as.logical(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
IsSquareRoot              = as.logical(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
IsOverdispersedPoisson    = as.logical(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
IsNegativeBinomial        = as.logical(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
IsEmpiricalLogit          = as.logical(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
IsOverdispersedBinomial   = as.logical(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
IsBetabinomial            = as.logical(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
IsLogPlusM                = as.logical(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
IsGamma                   = as.logical(   as.vector(settings[[2]][tel]))             ; tel = tel + 1
IsNormal                  = as.logical(   as.vector(settings[[2]][tel]))             ; tel = tel + 1

# Additional settings
nGCI = 100          # Number of draws for Generalized Confidence Interval   
smallGCI = 0.0001   # Bound on back-transformed values for the LOG-transform


# Define which analysis to perform
analysis = c("LogNormal", "SquareRoot", "OverdispersedPoisson", "NegativeBinomial")

# Define dispersion parameter
dispersion = ropoissonDispersion(OverallMean, CVComparator, PowerLawPower, Distribution)
dispersion 

# Define effects; always include 0 (or 1 on the original scale) 
logLocLower = log(LocLower)
logLocUpper = log(LocUpper)
evaluationGrid = evaluationGrid(logLocLower, logLocUpper, NumberOfEvaluationpoints)
names(evaluationGrid)
CSD = evaluationGrid$csd
effect = exp(evaluationGrid$effect)
effect

# Read Design matrix created by C#
# This contains the following columns: Constant, GMO, Dummies, Modifiers, Mean
data = read.csv(datafile, header=TRUE)
ncol = ncol(data)
nrow = nrow(data)
colnames = colnames(data)
coleffect = 2

# Check whether there are modifiers; type of columns can be checked with sapply(data, class)
modifiers = grep("Mod", colnames)
nmodifiers = length(modifiers)
if (length(modifiers)>0) {
  for (i in 1:nmodifiers) {
    print(i)
    data[[modifiers[[i]]]] = as.factor(data[[modifiers[[i]]]])
  } 
}

# Rename means column and add several additional columns 
colnames(data)[ncol] = "mean"
data["effect"]    = NaN
data["response"]  = NaN
data["block"]     = 1
data["lowOffset"] = NaN
data["uppOffset"] = NaN
sapply(data, class)
data

# Create dataframe for prediction; only use GMO columns and Dummy columns
# This implies that the mean is taken over blocks and also over modifiers (if any)
predictors = grep("GMO", gsub("Dummy", "GMO", colnames))
predictors
preddata = head(data[predictors], 2)
preddata[,] = 0
preddata[1] = c(0,1)
preddata

# Create formulas for H0 and H1; Note that col=2 is used to test the comparison
nameH1 = colnames[c(3:ncol) - 1]
if (ExperimentalDesignType == "RandomizedCompleteBlocks") { # Add blocking effect
  nameH1 = c(nameH1, "block")
}
nameH0 = nameH1[nameH1 != "GMO"]
nameH1
nameH0
if ((ExperimentalDesignType == "RandomizedCompleteBlocks") || (ExperimentalDesignType == "CompletelyRandomized")) {
  formulaH1 = as.formula(paste("response ~ ", paste(nameH1, collapse="+")))
} else {
  stop("ExperimentalDesignType '", ExperimentalDesignType, "' not implemented.", call. = FALSE)
}

if (length(nameH0)> 0) {
    print("pos")
    formulaH0     = as.formula(paste("response ~ ", paste(nameH0, collapse="+")))
    formulaH0_low = as.formula(paste("response ~ ", paste(nameH0, collapse="+"), " + offset(lowOffset)"))
    formulaH0_upp = as.formula(paste("response ~ ", paste(nameH0, collapse="+"), " + offset(uppOffset)"))
  } else {
    formulaH0     = as.formula("response ~ 1")
    formulaH0_low = as.formula("response ~ 1 + offset(lowOffset)")
    formulaH0_upp = as.formula("response ~ 1 + offset(uppOffset)")
}

# Add blocking effect to model 
if (ExperimentalDesignType == "RandomizedCompleteBlocks") {
  sigBlock = sqrt(log((CVBlocks/100)*(CVBlocks/100) + 1))
} else {
  sigBlock = 0
}

# Various
set.seed(RandomNumberSeed)

# Loop over number of NumberOfReplications
nreplications = length(NumberOfReplications)
neffect       = length(effect)
nanalysis     = length(analysis)

repBlock = rep(NumberOfReplications, each=neffect)
repEffect = rep(effect, nreplications)
rownames = paste("Block=", repBlock, " Effect=", repEffect, sep="")
pvalDiff   = matrix(nrow=NumberOfSimulatedDataSets, ncol=nanalysis, dimnames=list(NULL, analysis))
pvalEquiLR = matrix(nrow=NumberOfSimulatedDataSets, ncol=nanalysis, dimnames=list(NULL, analysis))
pvalEquiWD = matrix(nrow=NumberOfSimulatedDataSets, ncol=nanalysis, dimnames=list(NULL, analysis))

resultDiff   = matrix(nrow=nreplications*neffect, ncol=nanalysis, dimnames=list(NULL, analysis))
resultEquiLR = matrix(nrow=nreplications*neffect, ncol=nanalysis, dimnames=list(NULL, analysis))
resultEquiWD = matrix(nrow=nreplications*neffect, ncol=nanalysis, dimnames=list(NULL, analysis))

tel = 0
ntimes = nreplications*neffect*NumberOfSimulatedDataSets
title = paste(Endpoint, "  (Endpoint ", ComparisonId+1, " of ", NumberOfComparisons, ")", sep="")
progressbar <- winProgressBar(title=title, label="Number of replications", min=0, max=ntimes, width=400)
iprogressbar = 0

for (i in 1:nreplications) {
  # cat("i=", i, "\n")
  # Expand dataset 
  iReps = NumberOfReplications[i] 
  blocksi = iReps + 0*data[[1]]
  data.expanded = data[rep(row.names(data), blocksi), ]
  data.expanded[["block"]] = rep(1:iReps, nrow)  # block is still a factor
  labeli = formatC(i, width=ceiling(log10(nreplications+0.5)), flag="0")
  labeli = sprintf("Number of replications: %s  (%s of %s)", iReps, labeli, nreplications)

  # Prepare for apply effect
  applyeffect = data.expanded[coleffect]==1
  data.expanded[["effect"]] = data.expanded[["mean"]]

  # Apply blocking Effect; use Blom scores
  if (ExperimentalDesignType == "RandomizedCompleteBlocks") {
    blockeff = exp(sigBlock*qnorm((1:iReps-0.375)/(iReps+0.25)))
    data.expanded[["effect"]] = data.expanded[["effect"]] * blockeff[data.expanded[["block"]]]
  }
  data.expanded["lowOffset"] = data.expanded[coleffect] * logLocLower
  data.expanded["uppOffset"] = data.expanded[coleffect] * logLocUpper
  nmean = length(data.expanded[["effect"]])

  for (j in 1:neffect) {
    labelj = formatC(j, width=ceiling(log10(neffect+0.5)), flag="0")
    labelj = sprintf("Effect %s (%s)", labelj, neffect)
    data.expanded[["effect"]][applyeffect] = effect[j]*data.expanded["mean"][applyeffect]
    # print(data.expanded)
    # Do looping over simulations 
    for (k in 1:NumberOfSimulatedDataSets) {
      # cat("    k=", k, "\n")
      simulated = ropoisson(nmean, data.expanded[["effect"]], dispersion, PowerLawPower, Distribution)
      # ----------------------------------------------------------------------------------------------
      # OverdispersedPoisson -------------------------------------------------------------------------
      # ----------------------------------------------------------------------------------------------
      if (IsOverdispersedPoisson) {
        # cat("      IsOverdispersedPoisson", "\n")
        data.expanded[["response"]] = simulated
        glmH0 = glm(formulaH0, family="quasipoisson", data=data.expanded, mustart=data.expanded[["effect"]])
        glmH1 = glm(formulaH1, family="quasipoisson", data=data.expanded, mustart=data.expanded[["effect"]])
        if (iprogressbar==0) {
          cat("\nOverdispersedPoisson\n====================\n")
          print(summary(glmH1))
        }

        # Difference test         esti = glmH1$coef[2]
        df1 = df.residual(glmH1)
        estDispersion = sum(residuals(glmH1,type="pearson")^2)/df1
        pval = pf((deviance(glmH0) - deviance(glmH1))/estDispersion, 1, df1, lower.tail=FALSE)
        pvalDiff[k, "OverdispersedPoisson"] = pval
        if (k == 1) {
          qt = abs(qt(SignificanceLevel/2, df1, lower.tail=TRUE))
        }
        # Equivalence test 
        estiEffect = glmH1$coef[2]
        if ((estiEffect < logLocLower) | (estiEffect > logLocUpper)) {
          pvalEquiWD[k, "OverdispersedPoisson"] = 1
          pvalEquiLR[k, "OverdispersedPoisson"] = 1
        } else {
          # Wald equivalence test
          seEffect = sqrt(vcov(glmH1)[2,2])
          lower = estiEffect - qt * seEffect
          upper = estiEffect + qt * seEffect
          if ((lower>logLocLower) && (upper<logLocUpper)) {
            pvalEquiWD[k, "OverdispersedPoisson"] = 0
          } else {
            pvalEquiWD[k, "OverdispersedPoisson"] = 1
          }
          # LR equivalence test
          glmH0low = glm(formulaH0_low, family="quasipoisson", data=data.expanded, mustart=fitted.values(glmH0))
          glmH0upp = glm(formulaH0_upp, family="quasipoisson", data=data.expanded, mustart=fitted.values(glmH0))
          pvalLow = pf((deviance(glmH0low) - deviance(glmH1))/estDispersion, 1, df1, lower.tail=FALSE)
          pvalUpp = pf((deviance(glmH0upp) - deviance(glmH1))/estDispersion, 1, df1, lower.tail=FALSE)
          pvalEquiLR[k, "OverdispersedPoisson"] = max(pvalLow, pvalUpp)
        }
      }
      #print("OverdispersedPoisson completed")
      # ----------------------------------------------------------------------------------------------
      # LogNormal ------------------------------------------------------------------------------------
      # ----------------------------------------------------------------------------------------------
      if (IsLogNormal) {
        # cat("      IsLogNormal", "\n")
        data.expanded[["response"]] = log(simulated + 1)
        lmH1 = lm(formulaH1, data=data.expanded)
        if (iprogressbar==0) {
          cat("\nLogNormal\n=========\n")
          print(summary(lmH1))
        }
        pval = 2*pt(abs(lmH1$coef[2])/sqrt(vcov(lmH1)[2,2]), lmH1$df.residual, lower.tail=FALSE)
        pvalDiff[k, "LogNormal"] = pval
        resDF = df.residual(lmH1)
        resMS = deviance(lmH1)/resDF
        if (TRUE) {
          lsmeans = lsmeans(lmH1, "GMO", at=preddata)
          meanCMP = summary(lsmeans)$lsmean[1]
          meanGMO = summary(lsmeans)$lsmean[2]
          repCMP = resMS / (summary(lsmeans)$SE[1]^2)
          repGMO = resMS / (summary(lsmeans)$SE[2]^2)
          if (iprogressbar==0) {
            cat("\n")
            cat("  meanCMP = ", meanCMP, "\n")
            cat("  meanGMO = ", meanGMO, "\n")
            cat("  repGMO  = ", repGMO,  "\n")
            cat("  repCMP  = ", repCMP,  "\n")
            cat("\n")
          }
          # Generalized confidence interval
          chi = resDF * resMS / rchisq(nGCI, resDF)
          rCMP  = rnorm(nGCI, meanCMP, sqrt(chi/repCMP))
          rGMO  = rnorm(nGCI, meanGMO, sqrt(chi/repGMO))
          rCMP = exp(rCMP + chi/2) - 1
          rGMO = exp(rGMO + chi/2) - 1
          rCMP[rCMP<smallGCI] = smallGCI
          rGMO[rGMO<smallGCI] = smallGCI
          ratio = rGMO/rCMP
          # print(data.frame(rchi, chi, rCMP, rGMO, ratio))
          # For very small drwas from the Chi-distribution rCMP and rGMO can be out of bounds
          quantiles = quantile(ratio, c(SignificanceLevel/2, 1-SignificanceLevel/2), na.rm=TRUE)
          if ((quantiles[1]>LocLower) & (quantiles[2]<LocUpper)) {
            pvalEquiLR[k, "LogNormal"] = 0
          } else {
            pvalEquiLR[k, "LogNormal"] = 1
          }
          pvalEquiWD[k, "OverdispersedPoisson"] = NA
        }
      }

      # ----------------------------------------------------------------------------------------------
      # SquareRoot -----------------------------------------------------------------------------------
      # ----------------------------------------------------------------------------------------------
      if (IsSquareRoot) {
        data.expanded[["response"]] = sqrt(simulated)
        lmH1 = lm(formulaH1, data=data.expanded)
        if (iprogressbar==0) {
          cat("\nSquareRoot\n==========\n")
          print(summary(lmH1))
        }
        pval = 2*pt(abs(lmH1$coef[2])/sqrt(vcov(lmH1)[2,2]), lmH1$df.residual, lower.tail=FALSE)
        pvalDiff[k, "SquareRoot"] = pval
        resDF = df.residual(lmH1)
        resMS = deviance(lmH1)/resDF
        if (TRUE) {
          lsmeans = lsmeans(lmH1, "GMO", at=preddata)
          meanCMP = summary(lsmeans)$lsmean[1]
          meanGMO = summary(lsmeans)$lsmean[2]
          repCMP = resMS / (summary(lsmeans)$SE[1]^2)
          repGMO = resMS / (summary(lsmeans)$SE[2]^2)
          if (iprogressbar==0) {
            cat("\n")
            cat("  meanCMP = ", meanCMP, "\n")
            cat("  meanGMO = ", meanGMO, "\n")
            cat("  repGMO  = ", repGMO,  "\n")
            cat("  repCMP  = ", repCMP,  "\n")
            cat("\n")
          }

          # Generalized confidence interval
          chi = resDF * resMS / rchisq(nGCI, resDF)
          rCMP  = rnorm(nGCI, meanCMP, sqrt(chi/repCMP))
          rGMO  = rnorm(nGCI, meanGMO, sqrt(chi/repGMO))
          rCMP = rCMP + chi
          rGMO = rGMO + chi
          ratio = rGMO/rCMP
          quantiles = quantile(ratio, c(SignificanceLevel/2, 1-SignificanceLevel/2), na.rm=TRUE)
          if ((quantiles[1]>LocLower) & (quantiles[2]<LocUpper)) {
            pvalEquiLR[k, "SquareRoot"] = 0
          } else {
            pvalEquiLR[k, "SquareRoot"] = 1
          }
          pvalEquiWD[k, "SquareRoot"] = NA
        }
      }
      # ----------------------------------------------------------------------------------------------
      # NegativeBinomial -----------------------------------------------------------------------------
      # ----------------------------------------------------------------------------------------------
      if (IsNegativeBinomial) {
        # cat("      IsNegativeBinomial", "\n")
        data.expanded[["response"]] = simulated
        glmH0 = glm.nb(formulaH0, data=data.expanded, link=log)
        glmH1 = glm.nb(formulaH1, data=data.expanded, link=log, mustart=fitted.values(glmH0))
        if (iprogressbar==0) {
          cat("\nNegativeBinomial\n================\n")
          print(summary(glmH1))
        }
        pval = pchisq(-2*(logLik(glmH0) - logLik(glmH1)), 1, lower.tail=FALSE)
        pvalDiff[k, "NegativeBinomial"] = pval

        estiEffect = glmH1$coef[2]
        if ((estiEffect < logLocLower) | (estiEffect > logLocUpper)) {
          pval = 1
        } else {
          glmH0low = glm.nb(formulaH0_low, data=data.expanded, link=log, mustart=fitted.values(glmH0))
          glmH0upp = glm.nb(formulaH0_upp, data=data.expanded, link=log, mustart=fitted.values(glmH0))
          pvalLow = pchisq(deviance(glmH0low) - deviance(glmH1), 1, lower.tail=FALSE)
          pvalUpp = pchisq(deviance(glmH0upp) - deviance(glmH1), 1, lower.tail=FALSE)
          pval = max(pvalLow, pvalUpp)
        } 
        pvalEquiLR[k, "NegativeBinomial"] = pval
      }
      iprogressbar = iprogressbar + 1
      labelk = formatC(k, width=ceiling(log10(NumberOfSimulatedDataSets+0.5)), flag="0")
      labelk = sprintf("Simulation %s (%s)", labelk, NumberOfSimulatedDataSets)
      label = sprintf("%s;     %s;     %s", labeli, labelj, labelk)
      setWinProgressBar(progressbar, iprogressbar, label=label)
    }
    tel = tel + 1
    resultDiff[tel,] = colSums(pvalDiff < SignificanceLevel)/NumberOfSimulatedDataSets
    resultEquiLR[tel,] = colSums(pvalEquiLR < SignificanceLevel)/NumberOfSimulatedDataSets
    resultEquiWD[tel,] = colSums(pvalEquiWD < SignificanceLevel)/NumberOfSimulatedDataSets
  }
}
warnings()
print(resultDiff)
print(resultEquiLR)
print(resultEquiWD)

# Combine results into a single dataframe
df=cbind(repEffect, repEffect, CSD, repBlock, resultDiff, resultEquiLR, resultEquiWD)
df[,2] = log(df[,2])
dfnames = c("Ratio",  "LogRatio", "CSD", "NumberReplicates", 
    paste("PowerDifference", analysis, sep=""), 
    paste("PowerEquivalenceLR", analysis, sep=""), 
    paste("PowerEquivalenceWD", analysis, sep=""))
colnames(df) = dfnames

# Sort according to Ratio and NumberReplicates
df = df[ order(df[,2], df[,3]), ]
write.table(df, file=outputfile, quote=FALSE, sep=",", row.names=FALSE, col.names=TRUE, na="*")
q()

