GenStat 64-bit Release 16.2  (PC/Windows 7)          23 June 2014 16:01:00
Copyright 2013, VSN International Ltd.
Registered to: Plant Research International

   1
   2  enquire   ch=2 ; filetype=input  ; open=inopen  ; name=infile
   3  enquire   ch=2 ; filetype=output ; open=outopen ; name=outfile
   4
   5  SET [WORKINGDIRECTORY='D:/Data/AMIGA/AmigaTool/Power Analysis/PowerAnalysis/Resources']
   6
   7  if inopen.eq.0
   8      text      project ; 'test-0'
   9
  10      text      dir ; 'D:/Data/AMIGA/AmigaTool/TestData/'
  11      calculate pos = getposition(project ; '-')
  12      concatena [subdir] project ; width=getposition(project ; '-') - 1
  13      txconstru [infile] dir, subdir, '/', project, '.csv'
  14      open      infile ; channel=2 ; filetype=input
  15      sfilename [inputname=infile] directory=dir ; surname=sur
  16      txconstru [outfile] dir, sur, '-Output.csv'
  17      text      profile ; 'Lyles.pro'
  18      print     infile
  19      print outfile
  20    else
  21      close     ch=2 ; filetype=output
  22      text      profile ; 'Lyles.pro'
  23  endif
  24
  25  scalar    ch
  26  open      profile ; channel=ch ; filetype=input
  27  input     [print=*] ch
  28  close     channel=ch ; filetype=input
  29
  30
  31  " Completely randomized than one loop is sufficient "
  32
  33  " Simulation settings "
  34
  35  \scalar    ngridLOC ; 3
  36  \variate   nBlocks ; !(2,4,6,8,10,12,14,16)
  37  \variate   nBlocks ; !(2,4,8,16,32,64)  " For fitting "
  38  \scalar    alfa ; 0.05
  39  \scalar    seed ; 342894
  40
  41  \scalar    powerdist ; 1.5
  42  \text      design ; 'splitplot'
  43  \text      design ; 'randomized'
  44  \text      design ; 'block'
  45  \text      models ; !t(LN,NB)
  46  \text      models ; !t(LN,SQ,OP)
  47  \text      models ; !t(LN,SQ,OP,NB)
  48  \text      models ; !t(LN,SQ,OP)
  49  \text      models ; !t(LN,SQ,OP)
  50
  51  " Import Data from Simulation tool "
  52  text      [nvalues=1] dummy, distribution, design, method, IsLogNormal, \
  53            IsLogNormal, IsSquareRoot, IsOPoisson, IsNegBin
  54  scalar    lowerLOC, upperLOC, cvComparator, cvBlock, powerdist, alfa, \
  55            ngridLOC, seed, ndatasets
  56  variate   nBlocks
  57  scalar    nitems ; 0
  58  for read=lowerLOC, upperLOC, cvComparator, cvBlock, distribution, \
  59        powerdist, alfa, ngridLOC, nBlocks, design, method, seed, ndatasets, \
  60        IsLogNormal, IsSquareRoot, IsOPoisson, IsNegBin
  61    read    [print=* ; channel=2 ; end=*] dummy
  62    getattrib [attribute=stype] read ; save=att
  63    if att[].eqs.'variate'
  64        print 'variate'
  65        read    [print=# ; channel=2 ; setn=yes] read
  66      else
  67        read    [print=* ; channel=2] read
  68    endif
  69    \print read
  70    calculate nitems = nitems + 2
  71  endfor


variate


    Identifier   Minimum      Mean   Maximum    Values   Missing
       nBlocks     2.000     21.00     64.00         6         0

  72
  73  prin lowerLOC, upperLOC, cvComparator, cvBlock, distribution, \
  74        powerdist, alfa, ngridLOC, nBlocks, design, method, seed, ndatasets, \
  75        IsLogNormal, IsSquareRoot, IsOPoisson, IsNegBin

    lowerLOC    upperLOC cvComparator     cvBlock distribution   powerdist
      0.5000       2.000        100.0           0      Poisson           0






        alfa    ngridLOC     nBlocks                   design      method
     0.05000       19.00        2.00 RandomizedCompleteBlocks Approximate
                                4.00
                                8.00
                               16.00
                               32.00
                               64.00

        seed   ndatasets IsLogNormal IsSquareRoot IsOPoisson IsNegBin
       12345       100.0        True         True       True    False






  76
  77  text      models, ismodels ; !t(LN,SQ,OP,NB)
  78  equate    !t(#IsLogNormal, #IsSquareRoot, #IsOPoisson, #IsNegBin) ; ismodels
  79  subset    [ismodels.in.'True'] models
  80  print     models, ismodels

models ismodels
    LN     True
    SQ     True
    OP     True
          False

  81  close     channel=2 ; filetype=input
  82  fileread  [print=* ; name=infile ; skip=nitems ; imethod=read ; \
  83            separator=',' ; maxcat=0 ; isave=isave]
  84  sreplace  ['OverdispersedPoisson' ; 'opoisson'] distribution
  85  sreplace  ['PowerLaw' ; 'power'] distribution
  86
  87  sreplace  ['CompletelyRandomized' ; 'randomized'] design
  88  sreplace  ['RandomizedCompleteBlocks' ; 'block'] design
  89  sreplace  ['SplitPlot' ; 'splitplot'] design
  90
  91  prin isave

               isave
            Endpoint
        ComparisonId
NumberOfInteractions
   NumberOfModifiers
               Block
            MainPlot
             SubPlot
             Variety
                aaaa
                bbbb
           Frequency
                Mean
          Comparison

  92
  93  " Some extra options "
  94  calculate init = urand(seed ; 1)
  95
  96  " Create design matrix from input file "
  97  L1CREATE  [isave] MUCOMPARATOR=meanComparator ; MEAN=zz ; COMPARISON=comparison ; \
  98            DUMMY=dum ; MODIFIERS=Modifiers
  99
 100  " create grid for looping loop over loc/nblocks values "
 101  " for a randomized design the non-centrality parameter is proportional "
 102  calculate loglowerloc, logupperloc = log(lowerLOC, upperLOC)
 103  fgrid     [min=loglowerloc ; max=logupperloc ; ngrid=ngridLOC] gridratio
 104  calculate gridratio[] = exp(gridratio[])
 105  if flagRan = (design.eqs.'randomized') .or. (cvBlock.eq.0)
 106      variate   ratio ; gridratio[]
 107      variate   nreps ; 2 + 0*ratio
 108    else
 109      fgrid     [values=gridratio[], nBlocks] grid
 110      variate   ratio, nreps ; grid[] ; deci=*,0
 111  endif
 112
 113  calculate nloop = nvalues(ratio)
 114  decimals  ratio
 115
 116  " main looping "
 117  for [ntimes=nloop ; index=ii]
 118    scalar    iiratio, iireps ; (ratio, nreps)$[ii]
 119    PRINT     [IPRINT=* ; SQUASH=yes] iiratio, iireps ; FIELD=10 ; DECI=3,0
 120    l2lyles   [dist=#distribution ; power=powerdist ; design=#design ; sign=alfa ; \
 121              mucomp=meanComparator ; cvcomp=cvComparator ; cvblock=cvBlock ; \
 122              mean=Mean ; comparison=comparison ; dummy=dum ; \
 123              modifiers=Modifiers ; loclower=lowerLOC ; locupper=upperLOC ; \
 124              analysis=#models] iiratio ; iireps ; qnc[ii] ; qpow[ii] ; qdf[ii]
 125  endfor
     0.500         2
LN
SQ
OP
     0.540         2
LN
SQ
OP
     0.583         2
LN
SQ
OP
     0.630         2
LN
SQ
OP
     0.680         2
LN
SQ
OP
     0.735         2
LN
SQ
OP
     0.794         2
LN
SQ
OP
     0.857         2
LN
SQ
OP
     0.926         2
LN
SQ
OP
     1.000         2
LN
SQ
OP
     1.080         2
LN
SQ
OP
     1.167         2
LN
SQ
OP
     1.260         2
LN
SQ
OP
     1.361         2
LN
SQ
OP
     1.470         2
LN
SQ
OP
     1.587         2
LN
SQ
OP
     1.714         2
LN
SQ
OP
     1.852         2
LN
SQ
OP
     2.000         2
LN
SQ
OP
 126  variate   df ; !(#qdf) ; deci=0
 127  vequate   qnc,qpow ; nc,pow
 128
 129  " Expand for randomized "
 130  print flagRan

     flagRan
       1.000

 131  if flagRan
 132    scalar    nplots ; nvalues(Mean)
 133    calculate npars = 2*nplots - mean(df)
 134    fgrid     [values=ratio, nBlocks] grid
 135    variate   ratio, nreps ; grid[]
 136    groups    ratio, nreps ; fRatio, fReps
 137    tabulate  [class=fRatio, fReps] nplots*fReps - npars ; mean=tdf
 138    variate   df ; tdf ; decimals=0
 139
 140    pointer   [nvalues=nvalues(nc)] tnc, ttnc, pow
 141    table     [class=fRatio] tnc[] ; nc[]
 142    table     [class=fRatio, fReps] tNreps, ttnc[]
 143    tabulate  1*fReps ; mean=tNreps
 144    calculate ttnc[] = tnc[] * tNreps/2
 145    variate   nc[] ; ttnc[]
 146    calculate critvalChi = edchi(1-alfa + 0*df ; 1)
 147    calculate critvalF = edf(1-alfa + 0*df ; 1 ; df)
 148    for [index=ii] qq=nc[] ; pp=pow[] ; type=2,2,1,2,1
 149      if (type.eq.1)
 150          variate   pp ; CUCHI(critvalChi ; 1 ; qq)
 151        else
 152          variate   pp ; CUF(critvalF ; 1 ; df ; qq)
 153      endif
 154    endfor

******** Warning, code CA 58, statement 5 in for loop

Command:  variate pp ; CUF(critvalF ; 1 ; df ; qq)
Error in argument for distribution function.
Function has failed to converge.




******** Warning, code CA 58, statement 5 in for loop

Command:  variate pp ; CUF(critvalF ; 1 ; df ; qq)
Error in argument for distribution function.
Function has failed to converge.




******** Warning, code CA 58, statement 5 in for loop

Command:  variate pp ; CUF(critvalF ; 1 ; df ; qq)
Error in argument for distribution function.
Function has failed to converge.



 155  endif
 156  print   nc[1...5,8,9,10] ; fi=10 ; de=3

     nc[1]     nc[2]     nc[3]     nc[4]     nc[5]     nc[8]     nc[9]    nc[10]
    12.267    13.178    14.134    14.134         *     0.000     0.000         *
    24.535    26.356    28.268    28.268         *     0.000     0.000         *
    49.069    52.712    56.535    56.535         *     0.000     0.000         *
    98.139   105.425   113.071   113.071         *     0.000     0.000         *
   196.277   210.849   226.141   226.141         *     0.000     0.000         *
   392.555   421.699   452.283   452.283         *     0.000     0.000         *
    10.149    10.863    11.555    11.555         *     0.185     0.185         *
    20.298    21.726    23.110    23.110         *     0.370     0.370         *
    40.595    43.453    46.220    46.220         *     0.740     0.740         *
    81.191    86.905    92.439    92.439         *     1.479     1.479         *
   162.381   173.810   184.878   184.878         *     2.959     2.959         *
   324.762   347.620   369.756   369.756         *     5.918     5.918         *
     8.138     8.671     9.154     9.154         *     0.769     0.769         *
    16.275    17.343    18.308    18.308         *     1.537     1.537         *
    32.551    34.685    36.617    36.617         *     3.074     3.074         *
    65.101    69.371    73.233    73.233         *     6.149     6.149         *
   130.202   138.742   146.467   146.467         *    12.297    12.297         *
   260.404   277.484   292.933   292.933         *    24.595    24.595         *
     6.260     6.637     6.959     6.959         *     1.797     1.797         *
    12.520    13.274    13.918    13.918         *     3.595     3.595         *
    25.040    26.547    27.835    27.835         *     7.190     7.190         *
    50.080    53.094    55.671    55.671         *    14.379    14.379         *
   100.160   106.189   111.341   111.341         *    28.759    28.759         *
   200.320   212.378   222.683   222.683         *    57.517    57.517         *
     4.550     4.799     5.000     5.000         *     3.321     3.321         *
     9.100     9.597    10.000    10.000         *     6.642     6.642         *
    18.200    19.194    20.001    20.001         *    13.284    13.284         *
    36.400    38.389    40.002    40.002         *    26.568    26.568         *
    72.801    76.777    80.004    80.004         *    53.136    53.136         *
   145.601   153.555   160.008   160.008         *   106.272   106.272         *
     3.046     3.196     3.311     3.311         *     5.393     5.393         *
     6.092     6.392     6.623     6.623         *    10.786    10.786         *
    12.184    12.784    13.245    13.245         *    21.572    21.572         *
    24.368    25.569    26.490    26.490         *    43.144    43.144         *
    48.737    51.137    52.980    52.980         *    86.287    86.287         *
    97.474   102.275   105.961   105.961         *   172.574   172.574         *
     1.791     1.870     1.927     1.927         *     8.071     8.071         *
     3.581     3.740     3.854     3.854         *    16.143    16.143         *
     7.163     7.481     7.708     7.708         *    32.286    32.286         *
    14.325    14.961    15.417    15.417         *    64.572    64.572         *
    28.651    29.922    30.834    30.834         *   129.143   129.143         *
    57.301    59.845    61.668    61.668         *   258.287   258.287         *
     0.831     0.865     0.886     0.886         *    11.418    11.418         *
     1.662     1.729     1.772     1.772         *    22.836    22.836         *
     3.324     3.458     3.545     3.545         *    45.671    45.671         *
     6.648     6.916     7.090     7.090         *    91.342    91.342         *
    13.296    13.833    14.180    14.180         *   182.684   182.684         *
    26.592    27.665    28.360    28.360         *   365.369   365.369         *
     0.217     0.225     0.229     0.229         *    15.499    15.499         *
     0.433     0.450     0.459     0.459         *    30.998    30.998         *
     0.867     0.899     0.917     0.917         *    61.997    61.997         *
     1.734     1.798     1.834     1.834         *   123.993   123.993         *
     3.467     3.597     3.668     3.668         *   247.986   247.986         *
     6.934     7.193     7.336     7.336         *   495.973   495.973         *
     0.000     0.000     0.000     0.000         *    20.388    20.388         *
     0.000     0.000     0.000     0.000         *    40.775    40.775         *
     0.000     0.000     0.000     0.000         *    81.550    81.550         *
     0.000     0.000     0.000     0.000         *   163.100   163.100         *
     0.000     0.000     0.000     0.000         *   326.200   326.200         *
     0.000     0.000     0.000     0.000         *   652.401   652.401         *
     0.235     0.243     0.246     0.246         *    14.284    14.284         *
     0.470     0.486     0.491     0.491         *    28.568    28.568         *
     0.940     0.973     0.982     0.982         *    57.135    57.135         *
     1.879     1.945     1.964     1.964         *   114.270   114.270         *
     3.759     3.891     3.929     3.929         *   228.540   228.540         *
     7.518     7.782     7.858     7.858         *   457.081   457.081         *
     0.976     1.012     1.016     1.016         *    11.271    11.271         *
     1.953     2.023     2.033     2.033         *    22.542    22.542         *
     3.906     4.047     4.066     4.066         *    45.085    45.085         *
     7.812     8.094     8.131     8.131         *    90.169    90.169         *
    15.623    16.188    16.262    16.262         *   180.338   180.338         *
    31.246    32.376    32.525    32.525         *   360.676   360.676         *
     2.280     2.368     2.367     2.367         *     8.535     8.535         *
     4.560     4.736     4.734     4.734         *    17.070    17.070         *
     9.120     9.473     9.467     9.467         *    34.140    34.140         *
    18.240    18.945    18.935    18.935         *    68.279    68.279         *
    36.479    37.890    37.869    37.869         *   136.558   136.558         *
    72.958    75.780    75.739    75.739         *   273.116   273.116         *
     4.200     4.380     4.355     4.355         *     6.109     6.109         *
     8.401     8.761     8.710     8.710         *    12.218    12.218         *
    16.802    17.521    17.420    17.420         *    24.437    24.437         *
    33.604    35.042    34.840    34.840         *    48.874    48.874         *
    67.208    70.085    69.680    69.680         *    97.748    97.748         *
   134.416   140.170   139.359   139.359         *   195.496   195.496         *
     6.792     7.122     7.043     7.043         *     4.031     4.031         *
    13.585    14.245    14.086    14.086         *     8.061     8.061         *
    27.169    28.489    28.172    28.172         *    16.122    16.122         *
    54.338    56.978    56.345    56.345         *    32.244    32.244         *
   108.677   113.957   112.690   112.690         *    64.488    64.488         *
   217.353   227.914   225.379   225.379         *   128.976   128.976         *
    10.108    10.675    10.499    10.499         *     2.337     2.337         *
    20.216    21.350    20.997    20.997         *     4.674     4.674         *
    40.433    42.699    41.994    41.994         *     9.349     9.349         *
    80.866    85.398    83.989    83.989         *    18.698    18.698         *
   161.732   170.796   167.977   167.977         *    37.395    37.395         *
   323.464   341.593   335.954   335.954         *    74.791    74.791         *
    14.199    15.126    14.793    14.793         *     1.071     1.071         *
    28.399    30.251    29.586    29.586         *     2.142     2.142         *
    56.797    60.502    59.173    59.173         *     4.284     4.284         *
   113.594   121.005   118.346   118.346         *     8.568     8.568         *
   227.189   242.009   236.692   236.692         *    17.135    17.135         *
   454.378   484.019   473.383   473.383         *    34.270    34.270         *
    19.114    20.570    20.005    20.005         *     0.276     0.276         *
    38.228    41.140    40.009    40.009         *     0.552     0.552         *
    76.456    82.281    80.019    80.019         *     1.104     1.104         *
   152.913   164.562   160.037   160.037         *     2.208     2.208         *
   305.825   329.123   320.074   320.074         *     4.416     4.416         *
   611.651   658.247   640.149   640.149         *     8.833     8.833         *
    24.899    27.113    26.216    26.216         *     0.000     0.000         *
    49.797    54.227    52.431    52.431         *     0.000     0.000         *
    99.594   108.453   104.862   104.862         *     0.000     0.000         *
   199.189   216.906   209.724   209.724         *     0.000     0.000         *
   398.378   433.812   419.449   419.449         *     0.000     0.000         *
   796.755   867.625   838.898   838.898         *     0.000     0.000         *

 157  print   pow[1...5,8,9,10] ; fi=10 ; de=3

    pow[1]    pow[2]    pow[3]    pow[4]    pow[5]    pow[8]    pow[9]   pow[10]
     0.916     0.933     0.964     0.948         *     0.050     0.050         *
     0.998     0.999     1.000     0.999         *     0.050     0.050         *
     1.000     1.000     1.000     1.000         *     0.050     0.050         *
     1.000     1.000     1.000     1.000         *     0.050     0.050         *
     1.000     1.000     1.000     1.000         *     0.050     0.050         *
     1.000     1.000     1.000     1.000         *     0.050     0.050         *
     0.859     0.881     0.925     0.900         *     0.071     0.070         *
     0.993     0.995     0.998     0.997         *     0.093     0.091         *
     1.000     1.000     1.000     1.000         *     0.138     0.136         *
     1.000     1.000     1.000     1.000         *     0.229     0.227         *
     1.000     1.000     1.000     1.000         *     0.405     0.404         *
     1.000     1.000     1.000     1.000         *     0.682     0.681         *
     0.776     0.802     0.857     0.822         *     0.142     0.133         *
     0.977     0.983     0.990     0.987         *     0.236     0.228         *
     1.000     1.000     1.000     1.000         *     0.418     0.411         *
     1.000     1.000     1.000     1.000         *     0.698     0.694         *
     1.000     1.000     1.000     1.000         *     0.939     0.938         *
     1.000     1.000     1.000     1.000         *     0.999     0.999         *
     0.665     0.690     0.751     0.711         *     0.268     0.249         *
     0.933     0.946     0.962     0.954         *     0.475     0.458         *
     0.999     0.999     1.000     0.999         *     0.765     0.756         *
     1.000     1.000     1.000     1.000         *     0.967     0.965         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     0.530     0.552     0.609     0.569         *     0.445     0.413         *
     0.839     0.858     0.885     0.872         *     0.731     0.713         *
     0.988     0.991     0.994     0.993         *     0.954     0.950         *
     1.000     1.000     1.000     1.000         *     0.999     0.999         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     0.384     0.400     0.444     0.412         *     0.641     0.601         *
     0.676     0.696     0.730     0.712         *     0.907     0.895         *
     0.932     0.943     0.953     0.950         *     0.996     0.996         *
     0.998     0.999     0.999     0.999         *     1.000     1.000         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     0.248     0.257     0.284     0.263         *     0.811     0.773         *
     0.457     0.473     0.501     0.485         *     0.980     0.976         *
     0.754     0.772     0.793     0.785         *     1.000     1.000         *
     0.965     0.971     0.975     0.974         *     1.000     1.000         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     0.140     0.144     0.156     0.146         *     0.922     0.896         *
     0.243     0.251     0.265     0.256         *     0.998     0.997         *
     0.438     0.452     0.469     0.462         *     1.000     1.000         *
     0.728     0.744     0.759     0.755         *     1.000     1.000         *
     0.953     0.960     0.965     0.964         *     1.000     1.000         *
     0.999     1.000     1.000     1.000         *     1.000     1.000         *
     0.073     0.074     0.077     0.074         *     0.976     0.963         *
     0.099     0.101     0.104     0.102         *     1.000     1.000         *
     0.151     0.155     0.160     0.158         *     1.000     1.000         *
     0.258     0.266     0.273     0.271         *     1.000     1.000         *
     0.459     0.473     0.482     0.480         *     1.000     1.000         *
     0.749     0.764     0.773     0.772         *     1.000     1.000         *
     0.050     0.050     0.050     0.050         *     0.995     0.990         *
     0.050     0.050     0.050     0.050         *     1.000     1.000         *
     0.050     0.050     0.050     0.050         *     1.000     1.000         *
     0.050     0.050     0.050     0.050         *     1.000     1.000         *
     0.050     0.050     0.050     0.050         *     1.000     1.000         *
     0.050     0.050     0.050     0.050         *     1.000     1.000         *
     0.075     0.076     0.079     0.076         *     0.966     0.950         *
     0.103     0.105     0.108     0.105         *     1.000     0.999         *
     0.160     0.164     0.168     0.165         *     1.000     1.000         *
     0.276     0.284     0.289     0.286         *     1.000     1.000         *
     0.490     0.503     0.509     0.507         *     1.000     1.000         *
     0.782     0.796     0.800     0.799         *     1.000     1.000         *
     0.157     0.161     0.172     0.161         *     0.919     0.893         *
     0.277     0.285     0.297     0.287         *     0.997     0.996         *
     0.498     0.512     0.523     0.514         *     1.000     1.000         *
     0.794     0.808     0.814     0.810         *     1.000     1.000         *
     0.976     0.980     0.981     0.980         *     1.000     1.000         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     0.302     0.312     0.337     0.312         *     0.832     0.796         *
     0.552     0.567     0.585     0.567         *     0.985     0.981         *
     0.848     0.861     0.868     0.861         *     1.000     1.000         *
     0.989     0.991     0.992     0.991         *     1.000     1.000         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     0.498     0.515     0.551     0.512         *     0.696     0.655         *
     0.810     0.825     0.839     0.823         *     0.938     0.928         *
     0.982     0.985     0.987     0.985         *     0.999     0.998         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     0.700     0.721     0.756     0.716         *     0.519     0.482         *
     0.950     0.958     0.964     0.957         *     0.810     0.793         *
     0.999     1.000     1.000     1.000         *     0.980     0.978         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     0.858     0.876     0.900     0.871         *     0.333     0.309         *
     0.993     0.995     0.996     0.994         *     0.580     0.562         *
     1.000     1.000     1.000     1.000         *     0.864     0.857         *
     1.000     1.000     1.000     1.000         *     0.991     0.990         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     0.949     0.960     0.970     0.956         *     0.179     0.167         *
     0.999     1.000     1.000     1.000         *     0.310     0.299         *
     1.000     1.000     1.000     1.000         *     0.544     0.535         *
     1.000     1.000     1.000     1.000         *     0.833     0.829         *
     1.000     1.000     1.000     1.000         *     0.985     0.985         *
     1.000     1.000     1.000     1.000         *     1.000     1.000         *
     0.986     0.991     0.994     0.989         *     0.082     0.079         *
     1.000     1.000     1.000     1.000         *     0.115     0.112         *
     1.000     1.000     1.000     1.000         *     0.183     0.180         *
     1.000     1.000     1.000     1.000         *     0.318     0.315         *
     1.000     1.000     1.000     1.000         *     0.556     0.554         *
     1.000     1.000     1.000     1.000         *     0.844     0.843         *
     0.997     0.999     0.999     0.998         *     0.050     0.050         *
     1.000     1.000     1.000     1.000         *     0.050     0.050         *
     1.000     1.000     1.000     1.000         *     0.050     0.050         *
     1.000     1.000     1.000     1.000         *     0.050     0.050         *
     1.000     1.000     1.000     1.000         *     0.050     0.050         *
     1.000     1.000     1.000     1.000         *     0.050     0.050         *

 158
 159  " Export "
 160  text      names ; !t(\
 161            Ratio, \
 162            LogRatio, \
 163            NumberReplicates, \
 164            PowerDifferenceLogNormal, \
 165            PowerDifferenceSquaredRoot, \
 166            PowerDifferenceOverdispersedPoisson, \
 167            PowerDifferenceNegativeBinomial, \
 168            PowerEquivalenceLogNormal, \
 169            PowerEquivalenceSquaredRoot, \
 170            PowerEquivalenceOverdispersedPoison, \
 171            PowerEquivalenceNegativeBinomial)
 172
 173  calculate logratio = log(ratio)
 174  export    [outfile=outfile ; method=overwrite] \
 175            ratio, logratio, nreps, pow[1,2,4,5, 6,7,9,10] ; columns=#names
* MESSAGE: Deleting old version of D:\Data\AMIGA\AmigaTool\TestData\test\test-0-
Output.csv
EXPORT: 114 rows written to D:\Data\AMIGA\AmigaTool\TestData\test\test-0-Output.
csv
 176
 177
 178  stop

********* End of job. Current data space: 2 blocks, peak usage 80% at line 127.

