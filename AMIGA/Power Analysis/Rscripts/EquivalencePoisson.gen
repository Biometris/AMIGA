" Two-sided equivalence test of H0: mu2/mu1 outside interval [LOCleft,LOCright]
  By means of two one-sided LR tests
  Poisson distribution
  Shows that the test can be performed by means of the F test
  The estimate for xx is (mu2/mu1)

  Note when H0 : mu2/mu1 outside interval [LOCleft, INF] then 
  do not divide Pvalue by two, or use as critical value edchi(1-2*alfa ; 1)
"
scalar    LOC ; 3
scalar    mu1 ; 1
scalar    mu2 ; 2
scalar    nrep ; 100
scalar    seed ; 328312
scalar    nloop ; 1000
scalar    alfa ; 0.05

" Simulate data "
calculate init = urand(seed ; 1)
variate   yy, mu ; !(#nrep(#mu1, #mu2))
calculate yy = grpoisson(2*nrep ; mu)
variate   xx ; !(#nrep(0,1))
print     log(mu2/mu1)

" Fit model and Wald interval "
model     [dist=poisson] yy
fit       [nomes=lev,res,disp] xx
rkeep     esti=esti ; se=se ; dev=dev1 ; df=df1
scalar    logratio, selogratio ; (esti,se)$[2]
calculate leftWL,rightWL = exp(logratio + (-1,1)*ednormal(1-alfa/2)*selogratio)
calculate ratio = exp(logratio)
print     logratio, ratio, leftWL,rightWL

" LR interval "
scalar    ngrid ; 1000
calculate min,max = logratio + (-1,1)*ednormal(1-alfa/5)*selogratio
fgrid     [min=min ; max=max ; ngrid=ngrid] grid
variate   [nvalues=ngrid] savedev
for [ntimes=ngrid ; index=ii]
  calculate offset = (xx.eq.1) * grid[1]$[ii]
  model     [dist=poisson; offset=offset] yy
  fit       [print=*]
  rkeep     dev=dev0 ; df=df0
  calculate savedev$[ii] = dev0
endfor
calculate savedev = savedev - dev1
calculate edchi = edchi(1-alfa ; 1)
restrict  grid[], savedev ; grid[].gt.logratio
interpola oldval=savedev ; oldint=grid[] ; newval=!(#edchi) ; newint=rightLogLR
restrict  grid[], savedev
restrict  grid[], savedev ; grid[].lt.logratio
interpola oldval=savedev ; oldint=grid[] ; newval=!(#edchi) ; newint=leftLogLR
restrict  grid[], savedev
calculate leftLR, rightLR = exp(leftLogLR, rightLogLR)
print     leftLogLR, rightLogLR, leftLR, rightLR, leftWL,rightWL

" LR interval by means of FROOTFIND "
PROCEDURE '%FROOTFIND'
  OPTION    'FUNCTION', 'DATA' ; TYPE='scalar', 'pointer' ; \
            SET=yes ; DECLARED=yes ; PRESENT=yes
  PARAMETER 'PARAMETER' ; TYPE='scalar' ; SET=yes ; DECLARED=yes ; PRESENT=yes
  DUMMY     yy, dev1, xx ; DATA[]
  CALCULATE offset = (xx.eq.1) * PARAMETER
  MODEL     [DISTRIBUTION=poisson ; OFFSET=offset] yy
  FIT       [PRINT=*]
  RKEEP     DEVIANCE=dev0
  CALCULATE FUNCTION = dev0 - dev1
ENDPROCEDURE
pointer   [values=yy, dev1, xx] data
frootfind [print=moni,root ; data=data ; method=ridders] parameter=2(dummy) ; \
          value=edchi ; lower=min,logratio ; upper=logratio,max ; \
          root=RootLeft, RootRight
print     leftLogLR, rightLogLR, RootLeft, RootRight ; deci=5

" Graph of profile likelihood "
xaxis     1 ; lower=min ; upper=max ; title='Log(ratio)'
yaxis     1 ; lower=-0.3 ; title='Profile likelihood'
pen       1,2 ; method=line ; symbols=0 ; colour='black', 'red' ; thick=1.5
calculate line = edchi + 0*grid[]
variate   verty, leftx, rightx ; !(-100,#edchi), !(2(#leftLR)), !(2(#rightLR))
calculate leftx, rightx = log(leftx, rightx)
dgraph    [win=1 ; key=0 ; title='Profile likelihood Poisson'] \
          savedev,line,2(verty) ; 2(grid[]),leftx,rightx ; pen=1,1,2,2

" Set LOC to left and test "
" Note: never reject when estimate is outside LOC interval "
scalar    LOC ; leftLogLR
calculate offset = (xx.eq.1)*LOC
model     [dist=poisson; offset=offset] yy
terms     xx
fit       [print=* ; nomes=lev,res,disp]
rkeep     dev=dev0 ; df=df0
add       [print=* ; nomes=lev,res,disp] xx   " This is the full model "
rkeep     dev=dev1 ; df=df1 ; esti=esti2
calculate estidiff = esti2$[2] + LOC  " This is the estimate of the logratio "
print     estidiff, logratio
calculate ChiTest = (estidiff.ge.LOC) * (dev0-dev1)
calculate pChi = cuchi(ChiTest ; 1)/2
calculate critValChi = edchi(1-alfa ; 1)
print     pChi, ChiTest, critValChi

" Set LOC to right and test "
scalar    LOC ; rightLogLR
calculate offset = (xx.eq.1)*LOC
model     [dist=poisson; offset=offset] yy
fit       [print=* ; nomes=lev,res,disp]
rkeep     dev=dev0 ; df=df0
if 0
    " Not necessary to fit this model because this has been fitted before "
    add       [print=sum,esti ; nomes=lev,res,disp] xx
    rkeep     dev=dev1 ; df=df1 ; esti=esti2
    calculate devdiff = (esti2$[2].le.0) * (dev0-dev1)
  else
    calculate devdiff = (estidiff.le.LOC) * (dev0-dev1)
endif
calculate pChi = cuchi(ChiTest ; 1)/2
calculate critValChi = edchi(1-alfa ; 1)
print     pChi, ChiTest, critValChi
stop

